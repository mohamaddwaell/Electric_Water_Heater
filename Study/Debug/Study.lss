
Study.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000012b2  00001346  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  00800088  00800088  0000136e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000136e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002211  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e83  00000000  00000000  000038f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017fe  00000000  00000000  00004778  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000684  00000000  00000000  00005f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000090c  00000000  00000000  000065fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012b1  00000000  00000000  00006f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  000081b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__vector_1>
       8:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__vector_10>
      2c:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3a       	cpi	r26, 0xAF	; 175
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <main>
      8a:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <INT0_func>:
	}
}

void INT0_func()
{	
	if(on_off_mode == ON)
      92:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <on_off_mode>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	19 f4       	brne	.+6      	; 0xa0 <INT0_func+0xe>
	{
		on_off_mode = OFF;
      9a:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <on_off_mode>
      9e:	08 95       	ret
	}
	else if(on_off_mode == OFF)
      a0:	81 11       	cpse	r24, r1
      a2:	05 c0       	rjmp	.+10     	; 0xae <INT0_func+0x1c>
	{
		lcd_flag = ON;
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <lcd_flag>
		on_off_mode = ON;
      aa:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <on_off_mode>
      ae:	08 95       	ret

000000b0 <callbackTimer0>:
u8 led_flag = OFF;
u8 arr[10];
u8 ADC_counter = 0;

void callbackTimer0()
{
      b0:	cf 93       	push	r28
      b2:	df 93       	push	r29
	static u16 counter=0;
	counter++;
      b4:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <__data_end>
      b8:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <__data_end+0x1>
      bc:	4f 5f       	subi	r20, 0xFF	; 255
      be:	5f 4f       	sbci	r21, 0xFF	; 255
      c0:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__data_end+0x1>
      c4:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__data_end>
	//every 100 msec
	if(counter % 100 == 0)
      c8:	9a 01       	movw	r18, r20
      ca:	36 95       	lsr	r19
      cc:	27 95       	ror	r18
      ce:	36 95       	lsr	r19
      d0:	27 95       	ror	r18
      d2:	ab e7       	ldi	r26, 0x7B	; 123
      d4:	b4 e1       	ldi	r27, 0x14	; 20
      d6:	0e 94 48 09 	call	0x1290	; 0x1290 <__umulhisi3>
      da:	96 95       	lsr	r25
      dc:	87 95       	ror	r24
      de:	64 e6       	ldi	r22, 0x64	; 100
      e0:	68 9f       	mul	r22, r24
      e2:	90 01       	movw	r18, r0
      e4:	69 9f       	mul	r22, r25
      e6:	30 0d       	add	r19, r0
      e8:	11 24       	eor	r1, r1
      ea:	42 17       	cp	r20, r18
      ec:	53 07       	cpc	r21, r19
      ee:	a1 f4       	brne	.+40     	; 0x118 <callbackTimer0+0x68>
	{
		counter=0;
      f0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__data_end+0x1>
      f4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
		if(ADC_counter < 10)
      f8:	c0 91 8a 00 	lds	r28, 0x008A	; 0x80008a <ADC_counter>
      fc:	ca 30       	cpi	r28, 0x0A	; 10
      fe:	60 f4       	brcc	.+24     	; 0x118 <callbackTimer0+0x68>
		{
			arr[ADC_counter] = ADC_read(ADC0);
     100:	d0 e0       	ldi	r29, 0x00	; 0
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	0e 94 50 04 	call	0x8a0	; 0x8a0 <ADC_read>
     108:	ce 56       	subi	r28, 0x6E	; 110
     10a:	df 4f       	sbci	r29, 0xFF	; 255
     10c:	88 83       	st	Y, r24
			ADC_counter++;
     10e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <ADC_counter>
     112:	8f 5f       	subi	r24, 0xFF	; 255
     114:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <ADC_counter>
		}	
	}
}
     118:	df 91       	pop	r29
     11a:	cf 91       	pop	r28
     11c:	08 95       	ret

0000011e <callbackTimer1>:

void callbackTimer1()
{
	counter1++;
     11e:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <counter1>
     122:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <counter1+0x1>
     126:	01 96       	adiw	r24, 0x01	; 1
     128:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <counter1+0x1>
     12c:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <counter1>
	//every 5 sec
	if( TIMER1_flag == ON && counter1 == 5000 )
     130:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <TIMER1_flag>
     134:	21 30       	cpi	r18, 0x01	; 1
     136:	59 f4       	brne	.+22     	; 0x14e <callbackTimer1+0x30>
     138:	88 38       	cpi	r24, 0x88	; 136
     13a:	93 41       	sbci	r25, 0x13	; 19
     13c:	41 f4       	brne	.+16     	; 0x14e <callbackTimer1+0x30>
	{
		button_mode = first_push;
     13e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <button_mode>
		counter1=0;
     142:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <counter1+0x1>
     146:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <counter1>
		TIMER1_flag = OFF;	
     14a:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <TIMER1_flag>
	}
	if (led_flag == ON)
     14e:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <led_flag>
     152:	81 30       	cpi	r24, 0x01	; 1
     154:	21 f5       	brne	.+72     	; 0x19e <callbackTimer1+0x80>
	{
		if(counter1 % 1000 == 0)  //toggle led every 1 sec
     156:	40 91 8d 00 	lds	r20, 0x008D	; 0x80008d <counter1>
     15a:	50 91 8e 00 	lds	r21, 0x008E	; 0x80008e <counter1+0x1>
     15e:	9a 01       	movw	r18, r20
     160:	36 95       	lsr	r19
     162:	27 95       	ror	r18
     164:	36 95       	lsr	r19
     166:	27 95       	ror	r18
     168:	36 95       	lsr	r19
     16a:	27 95       	ror	r18
     16c:	a5 ec       	ldi	r26, 0xC5	; 197
     16e:	b0 e2       	ldi	r27, 0x20	; 32
     170:	0e 94 48 09 	call	0x1290	; 0x1290 <__umulhisi3>
     174:	92 95       	swap	r25
     176:	82 95       	swap	r24
     178:	8f 70       	andi	r24, 0x0F	; 15
     17a:	89 27       	eor	r24, r25
     17c:	9f 70       	andi	r25, 0x0F	; 15
     17e:	89 27       	eor	r24, r25
     180:	68 ee       	ldi	r22, 0xE8	; 232
     182:	73 e0       	ldi	r23, 0x03	; 3
     184:	86 9f       	mul	r24, r22
     186:	90 01       	movw	r18, r0
     188:	87 9f       	mul	r24, r23
     18a:	30 0d       	add	r19, r0
     18c:	96 9f       	mul	r25, r22
     18e:	30 0d       	add	r19, r0
     190:	11 24       	eor	r1, r1
     192:	42 17       	cp	r20, r18
     194:	53 07       	cpc	r21, r19
     196:	19 f4       	brne	.+6      	; 0x19e <callbackTimer1+0x80>
		{
			LED_toggle;
     198:	85 e1       	ldi	r24, 0x15	; 21
     19a:	0e 94 05 06 	call	0xc0a	; 0xc0a <DIO_togglePin>
     19e:	08 95       	ret

000001a0 <main>:
	}
}

int main(void)
{
	BUTTONS_init();
     1a0:	0e 94 95 02 	call	0x52a	; 0x52a <BUTTONS_init>
	GI_enable();
     1a4:	0e 94 95 06 	call	0xd2a	; 0xd2a <GI_enable>
	EXT0_init(EXT_RISING);
     1a8:	83 e0       	ldi	r24, 0x03	; 3
     1aa:	0e 94 1b 06 	call	0xc36	; 0xc36 <EXT0_init>
	EXT_setCallbackInt0(INT0_func);
     1ae:	89 e4       	ldi	r24, 0x49	; 73
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	0e 94 42 06 	call	0xc84	; 0xc84 <EXT_setCallbackInt0>
	LCD_init();
     1b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <LCD_init>
	EEPROM_init();
     1ba:	0e 94 a2 02 	call	0x544	; 0x544 <EEPROM_init>
	ADC_init();
     1be:	0e 94 3d 04 	call	0x87a	; 0x87a <ADC_init>
	LED_init;
     1c2:	61 e0       	ldi	r22, 0x01	; 1
     1c4:	85 e1       	ldi	r24, 0x15	; 21
     1c6:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_setPinDir>
	ELEMENTS_init();
     1ca:	0e 94 09 03 	call	0x612	; 0x612 <ELEMENTS_init>
	TIMER0_initCTCMode();
     1ce:	0e 94 20 07 	call	0xe40	; 0xe40 <TIMER0_initCTCMode>
	TIMER0_setCallbackCTC(callbackTimer0);
     1d2:	88 e5       	ldi	r24, 0x58	; 88
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 35 07 	call	0xe6a	; 0xe6a <TIMER0_setCallbackCTC>
	TIMER0_setOCR(249);
     1da:	89 ef       	ldi	r24, 0xF9	; 249
     1dc:	0e 94 33 07 	call	0xe66	; 0xe66 <TIMER0_setOCR>
	TIMER0_start(TIMER0_CLK_DIV_64);
     1e0:	82 e0       	ldi	r24, 0x02	; 2
     1e2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <TIMER0_start>
	TIMER1_initCTCMode();
     1e6:	0e 94 61 07 	call	0xec2	; 0xec2 <TIMER1_initCTCMode>
	TIMER1_setCallbackCTC(callbackTimer1);
     1ea:	8f e8       	ldi	r24, 0x8F	; 143
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 ca 07 	call	0xf94	; 0xf94 <TIMER1_setCallbackCTC>
	TIMER1_setOCR(249);
     1f2:	89 ef       	ldi	r24, 0xF9	; 249
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 73 07 	call	0xee6	; 0xee6 <TIMER1_setOCR>
	TIMER1_start(TIMER1_CLK_DIV_64);
     1fa:	83 e0       	ldi	r24, 0x03	; 3
     1fc:	0e 94 76 07 	call	0xeec	; 0xeec <TIMER1_start>
	
	
	if(EEPROM_readData(0x50) == 255)
     200:	80 e5       	ldi	r24, 0x50	; 80
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <EEPROM_readData>
     208:	8f 3f       	cpi	r24, 0xFF	; 255
     20a:	39 f4       	brne	.+14     	; 0x21a <main+0x7a>
	{
		desired_temp = 60;
     20c:	8c e3       	ldi	r24, 0x3C	; 60
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <desired_temp+0x1>
     214:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <desired_temp>
     218:	09 c0       	rjmp	.+18     	; 0x22c <main+0x8c>
	}
	else
	{
		desired_temp = EEPROM_readData(0x50);
     21a:	80 e5       	ldi	r24, 0x50	; 80
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <EEPROM_readData>
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <desired_temp+0x1>
     228:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <desired_temp>
		
	while (1)
	{
//////////////////////////////////////////////////////////////////////// LCD Flag
		
		if(on_off_mode == ON )  //ON mode
     22c:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <on_off_mode>
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	09 f0       	breq	.+2      	; 0x236 <main+0x96>
     234:	65 c1       	rjmp	.+714    	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
		{
			if(lcd_flag == ON)			
     236:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <lcd_flag>
     23a:	81 30       	cpi	r24, 0x01	; 1
     23c:	c1 f4       	brne	.+48     	; 0x26e <main+0xce>
			{
				LCD_goto(0,1);
     23e:	61 e0       	ldi	r22, 0x01	; 1
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	0e 94 31 04 	call	0x862	; 0x862 <LCD_goto>
				LCD_writeString("Actual Temp:");
     246:	80 e6       	ldi	r24, 0x60	; 96
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 c7 03 	call	0x78e	; 0x78e <LCD_writeString>
				LCD_goto(0,2);
     24e:	62 e0       	ldi	r22, 0x02	; 2
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	0e 94 31 04 	call	0x862	; 0x862 <LCD_goto>
				LCD_writeString("Desired Temp:");
     256:	8d e6       	ldi	r24, 0x6D	; 109
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 c7 03 	call	0x78e	; 0x78e <LCD_writeString>
				LCD_writeNum(desired_temp);
     25e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <desired_temp>
     262:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <desired_temp+0x1>
     266:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_writeNum>
				lcd_flag = OFF;
     26a:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <lcd_flag>
			}	
			
///////////////////////////////////////////////////////////////////////	BUTTON UP	
		
		if(DIO_readPinValue(BUTTON_UP) == DIO_HIGH)
     26e:	8e e1       	ldi	r24, 0x1E	; 30
     270:	0e 94 cf 05 	call	0xb9e	; 0xb9e <DIO_readPinValue>
     274:	81 30       	cpi	r24, 0x01	; 1
     276:	09 f0       	breq	.+2      	; 0x27a <main+0xda>
     278:	4f c0       	rjmp	.+158    	; 0x318 <main+0x178>
		{
			while(DIO_readPinValue(BUTTON_UP) == DIO_HIGH);
     27a:	8e e1       	ldi	r24, 0x1E	; 30
     27c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <DIO_readPinValue>
     280:	81 30       	cpi	r24, 0x01	; 1
     282:	d9 f3       	breq	.-10     	; 0x27a <main+0xda>
			
			TIMER1_flag = ON;
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <TIMER1_flag>
			counter1 = 0;
     28a:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <counter1+0x1>
     28e:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <counter1>
			
			if(button_mode == first_push)
     292:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <button_mode>
     296:	81 11       	cpse	r24, r1
     298:	0b c0       	rjmp	.+22     	; 0x2b0 <main+0x110>
			{
				LCD_goto(0,2);
     29a:	62 e0       	ldi	r22, 0x02	; 2
     29c:	0e 94 31 04 	call	0x862	; 0x862 <LCD_goto>
				LCD_writeString("TempSetMode ");
     2a0:	8b e7       	ldi	r24, 0x7B	; 123
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 c7 03 	call	0x78e	; 0x78e <LCD_writeString>
				button_mode = not_first_push;
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <button_mode>
     2ae:	34 c0       	rjmp	.+104    	; 0x318 <main+0x178>
			}
			else if(button_mode == not_first_push)
     2b0:	81 30       	cpi	r24, 0x01	; 1
     2b2:	91 f5       	brne	.+100    	; 0x318 <main+0x178>
			{	
				if(desired_temp + STEP_TEMP <= MAX_TEMP)
     2b4:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <desired_temp>
     2b8:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <desired_temp+0x1>
     2bc:	05 96       	adiw	r24, 0x05	; 5
     2be:	8c 34       	cpi	r24, 0x4C	; 76
     2c0:	91 05       	cpc	r25, r1
     2c2:	98 f4       	brcc	.+38     	; 0x2ea <main+0x14a>
				{
					desired_temp = desired_temp + STEP_TEMP;
     2c4:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <desired_temp+0x1>
     2c8:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <desired_temp>
					EEPROM_writeData(desired_temp,0x50);
     2cc:	60 e5       	ldi	r22, 0x50	; 80
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	0e 94 a6 02 	call	0x54c	; 0x54c <EEPROM_writeData>
					LCD_goto(13,2);
     2d4:	62 e0       	ldi	r22, 0x02	; 2
     2d6:	8d e0       	ldi	r24, 0x0D	; 13
     2d8:	0e 94 31 04 	call	0x862	; 0x862 <LCD_goto>
					LCD_writeNum(desired_temp);
     2dc:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <desired_temp>
     2e0:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <desired_temp+0x1>
     2e4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_writeNum>
     2e8:	17 c0       	rjmp	.+46     	; 0x318 <main+0x178>
				}
				else if(desired_temp + STEP_TEMP > MAX_TEMP)
     2ea:	8c 34       	cpi	r24, 0x4C	; 76
     2ec:	91 05       	cpc	r25, r1
     2ee:	a0 f0       	brcs	.+40     	; 0x318 <main+0x178>
				{
					desired_temp = MAX_TEMP;
     2f0:	8b e4       	ldi	r24, 0x4B	; 75
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <desired_temp+0x1>
     2f8:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <desired_temp>
					EEPROM_writeData(desired_temp,0x50);
     2fc:	60 e5       	ldi	r22, 0x50	; 80
     2fe:	70 e0       	ldi	r23, 0x00	; 0
     300:	0e 94 a6 02 	call	0x54c	; 0x54c <EEPROM_writeData>
					LCD_goto(13,2);
     304:	62 e0       	ldi	r22, 0x02	; 2
     306:	8d e0       	ldi	r24, 0x0D	; 13
     308:	0e 94 31 04 	call	0x862	; 0x862 <LCD_goto>
					LCD_writeNum(desired_temp);
     30c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <desired_temp>
     310:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <desired_temp+0x1>
     314:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_writeNum>
			}
		}
		
///////////////////////////////////////////////////////////////////BUTTON DOWN

		if(DIO_readPinValue(BUTTON_DOWN) == DIO_HIGH)
     318:	8f e1       	ldi	r24, 0x1F	; 31
     31a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <DIO_readPinValue>
     31e:	81 30       	cpi	r24, 0x01	; 1
     320:	09 f0       	breq	.+2      	; 0x324 <main+0x184>
     322:	4e c0       	rjmp	.+156    	; 0x3c0 <main+0x220>
		{
			while(DIO_readPinValue(BUTTON_DOWN) == DIO_HIGH);
     324:	8f e1       	ldi	r24, 0x1F	; 31
     326:	0e 94 cf 05 	call	0xb9e	; 0xb9e <DIO_readPinValue>
     32a:	81 30       	cpi	r24, 0x01	; 1
     32c:	d9 f3       	breq	.-10     	; 0x324 <main+0x184>
			
			TIMER1_flag = ON;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <TIMER1_flag>
			counter1 = 0;
     334:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <counter1+0x1>
     338:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <counter1>
			
			if( button_mode == first_push)
     33c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <button_mode>
     340:	81 11       	cpse	r24, r1
     342:	0b c0       	rjmp	.+22     	; 0x35a <main+0x1ba>
			{
				LCD_goto(0,2);
     344:	62 e0       	ldi	r22, 0x02	; 2
     346:	0e 94 31 04 	call	0x862	; 0x862 <LCD_goto>
				LCD_writeString("TempSetMode ");
     34a:	8b e7       	ldi	r24, 0x7B	; 123
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 c7 03 	call	0x78e	; 0x78e <LCD_writeString>
				button_mode = not_first_push;
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <button_mode>
     358:	33 c0       	rjmp	.+102    	; 0x3c0 <main+0x220>
			}
			else if( button_mode == not_first_push)
     35a:	81 30       	cpi	r24, 0x01	; 1
     35c:	89 f5       	brne	.+98     	; 0x3c0 <main+0x220>
			{
				if(desired_temp - STEP_TEMP >= MIN_TEMP)
     35e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <desired_temp>
     362:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <desired_temp+0x1>
     366:	05 97       	sbiw	r24, 0x05	; 5
     368:	83 32       	cpi	r24, 0x23	; 35
     36a:	91 05       	cpc	r25, r1
     36c:	98 f0       	brcs	.+38     	; 0x394 <main+0x1f4>
				{
					desired_temp = desired_temp - STEP_TEMP;
     36e:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <desired_temp+0x1>
     372:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <desired_temp>
					EEPROM_writeData(desired_temp,0x50);
     376:	60 e5       	ldi	r22, 0x50	; 80
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	0e 94 a6 02 	call	0x54c	; 0x54c <EEPROM_writeData>
					LCD_goto(13,2);
     37e:	62 e0       	ldi	r22, 0x02	; 2
     380:	8d e0       	ldi	r24, 0x0D	; 13
     382:	0e 94 31 04 	call	0x862	; 0x862 <LCD_goto>
					LCD_writeNum(desired_temp);
     386:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <desired_temp>
     38a:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <desired_temp+0x1>
     38e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_writeNum>
     392:	16 c0       	rjmp	.+44     	; 0x3c0 <main+0x220>
				}
				else if(desired_temp - STEP_TEMP < MIN_TEMP)
     394:	83 97       	sbiw	r24, 0x23	; 35
     396:	a0 f4       	brcc	.+40     	; 0x3c0 <main+0x220>
				{
					desired_temp = MIN_TEMP;
     398:	83 e2       	ldi	r24, 0x23	; 35
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <desired_temp+0x1>
     3a0:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <desired_temp>
					EEPROM_writeData(desired_temp,0x50);
     3a4:	60 e5       	ldi	r22, 0x50	; 80
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	0e 94 a6 02 	call	0x54c	; 0x54c <EEPROM_writeData>
					LCD_goto(13,2);
     3ac:	62 e0       	ldi	r22, 0x02	; 2
     3ae:	8d e0       	ldi	r24, 0x0D	; 13
     3b0:	0e 94 31 04 	call	0x862	; 0x862 <LCD_goto>
					LCD_writeNum(desired_temp);
     3b4:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <desired_temp>
     3b8:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <desired_temp+0x1>
     3bc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_writeNum>
				}
			}	
		}		
///////////////////////////////////////////////////////////////////TEMPERATURE SET MODE OFF(after 5 sec of buttons unpressed)

if(TIMER1_flag == OFF)
     3c0:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <TIMER1_flag>
     3c4:	81 11       	cpse	r24, r1
     3c6:	0a c0       	rjmp	.+20     	; 0x3dc <main+0x23c>
{
	LCD_goto(0,2);
     3c8:	62 e0       	ldi	r22, 0x02	; 2
     3ca:	0e 94 31 04 	call	0x862	; 0x862 <LCD_goto>
	LCD_writeString("Desired Temp:");
     3ce:	8d e6       	ldi	r24, 0x6D	; 109
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 c7 03 	call	0x78e	; 0x78e <LCD_writeString>
	TIMER1_flag = READY;
     3d6:	82 e0       	ldi	r24, 0x02	; 2
     3d8:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <TIMER1_flag>
}

//////////////////////////////////////////////////////////////////////////////////////	ADC Reading(10 times)

if(ADC_counter == 10)
     3dc:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <ADC_counter>
     3e0:	8a 30       	cpi	r24, 0x0A	; 10
     3e2:	89 f5       	brne	.+98     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
{
	actual_temp = 0;
     3e4:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <actual_temp+0x1>
     3e8:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <actual_temp>
	for (ADC_counter =0 ; ADC_counter < 10 ; ADC_counter++)
     3ec:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <ADC_counter>
     3f0:	12 c0       	rjmp	.+36     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	{
		actual_temp = actual_temp+arr[ADC_counter];
     3f2:	e8 2f       	mov	r30, r24
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	ee 56       	subi	r30, 0x6E	; 110
     3f8:	ff 4f       	sbci	r31, 0xFF	; 255
     3fa:	90 81       	ld	r25, Z
     3fc:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <actual_temp>
     400:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <actual_temp+0x1>
     404:	29 0f       	add	r18, r25
     406:	31 1d       	adc	r19, r1
     408:	30 93 a3 00 	sts	0x00A3, r19	; 0x8000a3 <actual_temp+0x1>
     40c:	20 93 a2 00 	sts	0x00A2, r18	; 0x8000a2 <actual_temp>
//////////////////////////////////////////////////////////////////////////////////////	ADC Reading(10 times)

if(ADC_counter == 10)
{
	actual_temp = 0;
	for (ADC_counter =0 ; ADC_counter < 10 ; ADC_counter++)
     410:	8f 5f       	subi	r24, 0xFF	; 255
     412:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <ADC_counter>
     416:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <ADC_counter>
     41a:	8a 30       	cpi	r24, 0x0A	; 10
     41c:	50 f3       	brcs	.-44     	; 0x3f2 <main+0x252>
	{
		actual_temp = actual_temp+arr[ADC_counter];
	}
	actual_temp = actual_temp / 10;
     41e:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <actual_temp>
     422:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <actual_temp+0x1>
     426:	ad ec       	ldi	r26, 0xCD	; 205
     428:	bc ec       	ldi	r27, 0xCC	; 204
     42a:	0e 94 48 09 	call	0x1290	; 0x1290 <__umulhisi3>
     42e:	96 95       	lsr	r25
     430:	87 95       	ror	r24
     432:	96 95       	lsr	r25
     434:	87 95       	ror	r24
     436:	96 95       	lsr	r25
     438:	87 95       	ror	r24
     43a:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <actual_temp+0x1>
     43e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <actual_temp>
	ADC_counter = 0;
     442:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <ADC_counter>
}
		
///////////////////////////////////////////////////////////////	LM35		
	   
	  actual_temp_analog = ADC_convertAnalog(actual_temp);
     446:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <actual_temp>
     44a:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <actual_temp+0x1>
     44e:	0e 94 b1 04 	call	0x962	; 0x962 <ADC_convertAnalog>
     452:	60 93 9e 00 	sts	0x009E, r22	; 0x80009e <actual_temp_analog>
     456:	70 93 9f 00 	sts	0x009F, r23	; 0x80009f <actual_temp_analog+0x1>
     45a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <actual_temp_analog+0x2>
     45e:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <actual_temp_analog+0x3>
	  actual_temp_celesius = 100 * actual_temp_analog;
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	48 ec       	ldi	r20, 0xC8	; 200
     468:	52 e4       	ldi	r21, 0x42	; 66
     46a:	0e 94 b3 08 	call	0x1166	; 0x1166 <__mulsf3>
     46e:	0e 94 f6 07 	call	0xfec	; 0xfec <__fixunssfsi>
     472:	60 93 a4 00 	sts	0x00A4, r22	; 0x8000a4 <actual_temp_celesius>
	  LCD_goto(12,1);
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	8c e0       	ldi	r24, 0x0C	; 12
     47a:	0e 94 31 04 	call	0x862	; 0x862 <LCD_goto>
	  LCD_writeNum(actual_temp_celesius);
     47e:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <actual_temp_celesius>
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_writeNum>
	       
//////////////////////////////////////////////////////////////	FAN/HEATER	

			if(actual_temp_celesius < (desired_temp - 4) )
     488:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <actual_temp_celesius>
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	20 91 9c 00 	lds	r18, 0x009C	; 0x80009c <desired_temp>
     492:	30 91 9d 00 	lds	r19, 0x009D	; 0x80009d <desired_temp+0x1>
     496:	a9 01       	movw	r20, r18
     498:	44 50       	subi	r20, 0x04	; 4
     49a:	51 09       	sbc	r21, r1
     49c:	84 17       	cp	r24, r20
     49e:	95 07       	cpc	r25, r21
     4a0:	60 f4       	brcc	.+24     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
			{
				HEATER_ON;
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	8f e0       	ldi	r24, 0x0F	; 15
     4a6:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
				FAN_OFF;
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	8e e0       	ldi	r24, 0x0E	; 14
     4ae:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
				led_flag = ON;
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <led_flag>
     4b8:	b9 ce       	rjmp	.-654    	; 0x22c <main+0x8c>
				
			}
			else if (actual_temp_celesius > (desired_temp + 4) )
     4ba:	2c 5f       	subi	r18, 0xFC	; 252
     4bc:	3f 4f       	sbci	r19, 0xFF	; 255
     4be:	28 17       	cp	r18, r24
     4c0:	39 07       	cpc	r19, r25
     4c2:	78 f4       	brcc	.+30     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
			{
				HEATER_OFF;
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	8f e0       	ldi	r24, 0x0F	; 15
     4c8:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
				led_flag = OFF;
     4cc:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <led_flag>
				FAN_ON;
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	8e e0       	ldi	r24, 0x0E	; 14
     4d4:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
				LED_ON;
     4d8:	61 e0       	ldi	r22, 0x01	; 1
     4da:	85 e1       	ldi	r24, 0x15	; 21
     4dc:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
     4e0:	a5 ce       	rjmp	.-694    	; 0x22c <main+0x8c>
				
			}
			else
			{
				HEATER_OFF;
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	8f e0       	ldi	r24, 0x0F	; 15
     4e6:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
				led_flag = OFF;
     4ea:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <led_flag>
				FAN_OFF;
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	8e e0       	ldi	r24, 0x0E	; 14
     4f2:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
				LED_OFF;
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	85 e1       	ldi	r24, 0x15	; 21
     4fa:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
     4fe:	96 ce       	rjmp	.-724    	; 0x22c <main+0x8c>
			
		} // ON mode
		
/////////////////////////////////////////////////////////////////////////////// OFF mode
		
		else if(on_off_mode == OFF)
     500:	81 11       	cpse	r24, r1
     502:	94 ce       	rjmp	.-728    	; 0x22c <main+0x8c>
		{
			LCD_clearDis();
     504:	0e 94 da 03 	call	0x7b4	; 0x7b4 <LCD_clearDis>
			LED_OFF;
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	85 e1       	ldi	r24, 0x15	; 21
     50c:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
			HEATER_OFF;
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	8f e0       	ldi	r24, 0x0F	; 15
     514:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
			FAN_OFF;
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	8e e0       	ldi	r24, 0x0E	; 14
     51c:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
			TIMER1_flag = OFF;
     520:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <TIMER1_flag>
			button_mode = first_push;
     524:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <button_mode>
     528:	81 ce       	rjmp	.-766    	; 0x22c <main+0x8c>

0000052a <BUTTONS_init>:

#include "BUTTONS_INTERFACE.h"

void BUTTONS_init()
{
	DIO_setPinDir(BUTTON_ON_OFF,DIO_OUTPUT);  // on/off button
     52a:	61 e0       	ldi	r22, 0x01	; 1
     52c:	8d e1       	ldi	r24, 0x1D	; 29
     52e:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_setPinDir>
	DIO_setPinDir(BUTTON_UP,DIO_OUTPUT);  // up button
     532:	61 e0       	ldi	r22, 0x01	; 1
     534:	8e e1       	ldi	r24, 0x1E	; 30
     536:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_setPinDir>
	DIO_setPinDir(BUTTON_DOWN,DIO_OUTPUT);  // down button	
     53a:	61 e0       	ldi	r22, 0x01	; 1
     53c:	8f e1       	ldi	r24, 0x1F	; 31
     53e:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_setPinDir>
     542:	08 95       	ret

00000544 <EEPROM_init>:
#include "BIT_MATH.h"
#include "I2C_INTERFACE.h"

void EEPROM_init()
{
	I2C_init(MASTER);
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	0e 94 99 06 	call	0xd32	; 0xd32 <I2C_init>
     54a:	08 95       	ret

0000054c <EEPROM_writeData>:
}

void EEPROM_writeData(u8 data,u16 location)
{
	//send start
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     54c:	94 ea       	ldi	r25, 0xA4	; 164
     54e:	96 bf       	out	0x36, r25	; 54
	while( GET_BIT(TWCR,TWINT) ==0 );
     550:	06 b6       	in	r0, 0x36	; 54
     552:	07 fe       	sbrs	r0, 7
     554:	fd cf       	rjmp	.-6      	; 0x550 <EEPROM_writeData+0x4>
	
	//address_3bitLocation_w
	TWDR = 0b10100000 | (GET_BIT(location,10)<<3) | (GET_BIT(location,9)<<2) | (GET_BIT(location,8)<<1);
     556:	72 fb       	bst	r23, 2
     558:	99 27       	eor	r25, r25
     55a:	90 f9       	bld	r25, 0
     55c:	29 2f       	mov	r18, r25
     55e:	22 0f       	add	r18, r18
     560:	22 0f       	add	r18, r18
     562:	22 0f       	add	r18, r18
     564:	71 fb       	bst	r23, 1
     566:	99 27       	eor	r25, r25
     568:	90 f9       	bld	r25, 0
     56a:	99 0f       	add	r25, r25
     56c:	99 0f       	add	r25, r25
     56e:	92 2b       	or	r25, r18
     570:	71 70       	andi	r23, 0x01	; 1
     572:	77 0f       	add	r23, r23
     574:	79 2b       	or	r23, r25
     576:	70 6a       	ori	r23, 0xA0	; 160
     578:	73 b9       	out	0x03, r23	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     57a:	94 e8       	ldi	r25, 0x84	; 132
     57c:	96 bf       	out	0x36, r25	; 54
	while( GET_BIT(TWCR,TWINT) ==0 );
     57e:	06 b6       	in	r0, 0x36	; 54
     580:	07 fe       	sbrs	r0, 7
     582:	fd cf       	rjmp	.-6      	; 0x57e <EEPROM_writeData+0x32>
	
	//8bitLocation
	TWDR = (u8)location;   //(u8) for casting
     584:	63 b9       	out	0x03, r22	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     586:	94 e8       	ldi	r25, 0x84	; 132
     588:	96 bf       	out	0x36, r25	; 54
	while( GET_BIT(TWCR,TWINT) ==0 );
     58a:	06 b6       	in	r0, 0x36	; 54
     58c:	07 fe       	sbrs	r0, 7
     58e:	fd cf       	rjmp	.-6      	; 0x58a <EEPROM_writeData+0x3e>
	
	//send data
	TWDR = data;
     590:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     592:	84 e8       	ldi	r24, 0x84	; 132
     594:	86 bf       	out	0x36, r24	; 54
	while( GET_BIT(TWCR,TWINT) ==0 );
     596:	06 b6       	in	r0, 0x36	; 54
     598:	07 fe       	sbrs	r0, 7
     59a:	fd cf       	rjmp	.-6      	; 0x596 <EEPROM_writeData+0x4a>
	
	//send stop
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     59c:	84 e9       	ldi	r24, 0x94	; 148
     59e:	86 bf       	out	0x36, r24	; 54
     5a0:	08 95       	ret

000005a2 <EEPROM_readData>:

u8 EEPROM_readData(u16 location)
{
	/////dummy write/////
	//send start
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     5a2:	24 ea       	ldi	r18, 0xA4	; 164
     5a4:	26 bf       	out	0x36, r18	; 54
	while( GET_BIT(TWCR,TWINT) ==0 );
     5a6:	06 b6       	in	r0, 0x36	; 54
     5a8:	07 fe       	sbrs	r0, 7
     5aa:	fd cf       	rjmp	.-6      	; 0x5a6 <EEPROM_readData+0x4>
	
	//address_3bitLocation_w
	TWDR = 0b10100000 | (GET_BIT(location,10)<<3) | (GET_BIT(location,9)<<2) | (GET_BIT(location,8)<<1);
     5ac:	92 fb       	bst	r25, 2
     5ae:	22 27       	eor	r18, r18
     5b0:	20 f9       	bld	r18, 0
     5b2:	32 2f       	mov	r19, r18
     5b4:	33 0f       	add	r19, r19
     5b6:	33 0f       	add	r19, r19
     5b8:	33 0f       	add	r19, r19
     5ba:	91 fb       	bst	r25, 1
     5bc:	22 27       	eor	r18, r18
     5be:	20 f9       	bld	r18, 0
     5c0:	22 0f       	add	r18, r18
     5c2:	22 0f       	add	r18, r18
     5c4:	23 2b       	or	r18, r19
     5c6:	91 70       	andi	r25, 0x01	; 1
     5c8:	99 0f       	add	r25, r25
     5ca:	92 2b       	or	r25, r18
     5cc:	29 2f       	mov	r18, r25
     5ce:	20 6a       	ori	r18, 0xA0	; 160
     5d0:	23 b9       	out	0x03, r18	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     5d2:	24 e8       	ldi	r18, 0x84	; 132
     5d4:	26 bf       	out	0x36, r18	; 54
	while( GET_BIT(TWCR,TWINT) ==0 );
     5d6:	06 b6       	in	r0, 0x36	; 54
     5d8:	07 fe       	sbrs	r0, 7
     5da:	fd cf       	rjmp	.-6      	; 0x5d6 <EEPROM_readData+0x34>
	
	//8bitLocation
	TWDR = (u8)location;
     5dc:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     5de:	84 e8       	ldi	r24, 0x84	; 132
     5e0:	86 bf       	out	0x36, r24	; 54
	while( GET_BIT(TWCR,TWINT) ==0 );
     5e2:	06 b6       	in	r0, 0x36	; 54
     5e4:	07 fe       	sbrs	r0, 7
     5e6:	fd cf       	rjmp	.-6      	; 0x5e2 <EEPROM_readData+0x40>
	
	//send start
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     5e8:	84 ea       	ldi	r24, 0xA4	; 164
     5ea:	86 bf       	out	0x36, r24	; 54
	while( GET_BIT(TWCR,TWINT) ==0 );
     5ec:	06 b6       	in	r0, 0x36	; 54
     5ee:	07 fe       	sbrs	r0, 7
     5f0:	fd cf       	rjmp	.-6      	; 0x5ec <EEPROM_readData+0x4a>
	
	//address_3bitLocation_r
	TWDR = 0b10100001 | (GET_BIT(location,10)<<3) | (GET_BIT(location,9)<<2) | (GET_BIT(location,8)<<1);
     5f2:	91 6a       	ori	r25, 0xA1	; 161
     5f4:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     5f6:	84 e8       	ldi	r24, 0x84	; 132
     5f8:	86 bf       	out	0x36, r24	; 54
	while( GET_BIT(TWCR,TWINT) ==0 );
     5fa:	06 b6       	in	r0, 0x36	; 54
     5fc:	07 fe       	sbrs	r0, 7
     5fe:	fd cf       	rjmp	.-6      	; 0x5fa <EEPROM_readData+0x58>
	
	//read data -> NACK
	TWCR = (1<<TWINT) | (1<<TWEN);
     600:	84 e8       	ldi	r24, 0x84	; 132
     602:	86 bf       	out	0x36, r24	; 54
	while( GET_BIT(TWCR,TWINT) ==0 );
     604:	06 b6       	in	r0, 0x36	; 54
     606:	07 fe       	sbrs	r0, 7
     608:	fd cf       	rjmp	.-6      	; 0x604 <EEPROM_readData+0x62>
	u8 data = TWDR;
     60a:	83 b1       	in	r24, 0x03	; 3
	
	//send stop
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     60c:	94 e9       	ldi	r25, 0x94	; 148
     60e:	96 bf       	out	0x36, r25	; 54
	
	return data;
}
     610:	08 95       	ret

00000612 <ELEMENTS_init>:
#include "ELEMENTS_INT.h"


void ELEMENTS_init()
{
	DIO_setPinDir(HEATER,DIO_OUTPUT);
     612:	61 e0       	ldi	r22, 0x01	; 1
     614:	8f e0       	ldi	r24, 0x0F	; 15
     616:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_setPinDir>
	DIO_setPinDir(FAN,DIO_OUTPUT);
     61a:	61 e0       	ldi	r22, 0x01	; 1
     61c:	8e e0       	ldi	r24, 0x0E	; 14
     61e:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_setPinDir>
     622:	08 95       	ret

00000624 <LCD_sendData>:
	
}


static void LCD_sendData(u8 data)
{
     624:	cf 93       	push	r28
     626:	c8 2f       	mov	r28, r24
	#if LCD_MODE == 4
	
	
	DIO_setPinValue(LCD_D4,GET_BIT(data,4));
     628:	84 fb       	bst	r24, 4
     62a:	66 27       	eor	r22, r22
     62c:	60 f9       	bld	r22, 0
     62e:	85 e0       	ldi	r24, 0x05	; 5
     630:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
	DIO_setPinValue(LCD_D5,GET_BIT(data,5));
     634:	c5 fb       	bst	r28, 5
     636:	66 27       	eor	r22, r22
     638:	60 f9       	bld	r22, 0
     63a:	86 e0       	ldi	r24, 0x06	; 6
     63c:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
	DIO_setPinValue(LCD_D6,GET_BIT(data,6));
     640:	c6 fb       	bst	r28, 6
     642:	66 27       	eor	r22, r22
     644:	60 f9       	bld	r22, 0
     646:	87 e0       	ldi	r24, 0x07	; 7
     648:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
	DIO_setPinValue(LCD_D7,GET_BIT(data,7));
     64c:	6c 2f       	mov	r22, r28
     64e:	66 1f       	adc	r22, r22
     650:	66 27       	eor	r22, r22
     652:	66 1f       	adc	r22, r22
     654:	8a e0       	ldi	r24, 0x0A	; 10
     656:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
	
	DIO_setPinValue(LCD_E,DIO_HIGH);
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	8b e0       	ldi	r24, 0x0B	; 11
     65e:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     662:	8f e9       	ldi	r24, 0x9F	; 159
     664:	9f e0       	ldi	r25, 0x0F	; 15
     666:	01 97       	sbiw	r24, 0x01	; 1
     668:	f1 f7       	brne	.-4      	; 0x666 <LCD_sendData+0x42>
     66a:	00 c0       	rjmp	.+0      	; 0x66c <LCD_sendData+0x48>
     66c:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_E,DIO_LOW);	
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	8b e0       	ldi	r24, 0x0B	; 11
     672:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
	
	DIO_setPinValue(LCD_D4,GET_BIT(data,0));
     676:	6c 2f       	mov	r22, r28
     678:	61 70       	andi	r22, 0x01	; 1
     67a:	85 e0       	ldi	r24, 0x05	; 5
     67c:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
	DIO_setPinValue(LCD_D5,GET_BIT(data,1));
     680:	c1 fb       	bst	r28, 1
     682:	66 27       	eor	r22, r22
     684:	60 f9       	bld	r22, 0
     686:	86 e0       	ldi	r24, 0x06	; 6
     688:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
	DIO_setPinValue(LCD_D6,GET_BIT(data,2));
     68c:	c2 fb       	bst	r28, 2
     68e:	66 27       	eor	r22, r22
     690:	60 f9       	bld	r22, 0
     692:	87 e0       	ldi	r24, 0x07	; 7
     694:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
	DIO_setPinValue(LCD_D7,GET_BIT(data,3));
     698:	c3 fb       	bst	r28, 3
     69a:	66 27       	eor	r22, r22
     69c:	60 f9       	bld	r22, 0
     69e:	8a e0       	ldi	r24, 0x0A	; 10
     6a0:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
	
	DIO_setPinValue(LCD_E,DIO_HIGH);
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	8b e0       	ldi	r24, 0x0B	; 11
     6a8:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
     6ac:	8f e9       	ldi	r24, 0x9F	; 159
     6ae:	9f e0       	ldi	r25, 0x0F	; 15
     6b0:	01 97       	sbiw	r24, 0x01	; 1
     6b2:	f1 f7       	brne	.-4      	; 0x6b0 <LCD_sendData+0x8c>
     6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <LCD_sendData+0x92>
     6b6:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_E,DIO_LOW);
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	8b e0       	ldi	r24, 0x0B	; 11
     6bc:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
	DIO_setPinValue(LCD_E,DIO_HIGH);
	_delay_ms(1);
	DIO_setPinValue(LCD_E,DIO_LOW);
	
	#endif
}
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <LCD_writeCmd>:


void LCD_writeCmd(u8 data)
{
     6c4:	cf 93       	push	r28
     6c6:	c8 2f       	mov	r28, r24
	DIO_setPinValue(LCD_RS,DIO_LOW);
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	8d e0       	ldi	r24, 0x0D	; 13
     6cc:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
	DIO_setPinValue(LCD_RW,DIO_LOW);
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	8c e0       	ldi	r24, 0x0C	; 12
     6d4:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
	LCD_sendData(data);
     6d8:	8c 2f       	mov	r24, r28
     6da:	0e 94 12 03 	call	0x624	; 0x624 <LCD_sendData>
	
}
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <LCD_init>:

void LCD_init()
{
	#if LCD_MODE == 4
	
	DIO_setPinDir(LCD_RS,DIO_OUTPUT);
     6e2:	61 e0       	ldi	r22, 0x01	; 1
     6e4:	8d e0       	ldi	r24, 0x0D	; 13
     6e6:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_setPinDir>
	DIO_setPinDir(LCD_RW,DIO_OUTPUT);
     6ea:	61 e0       	ldi	r22, 0x01	; 1
     6ec:	8c e0       	ldi	r24, 0x0C	; 12
     6ee:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_setPinDir>
	DIO_setPinDir(LCD_E,DIO_OUTPUT);
     6f2:	61 e0       	ldi	r22, 0x01	; 1
     6f4:	8b e0       	ldi	r24, 0x0B	; 11
     6f6:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_setPinDir>
	
	DIO_setPinDir(LCD_D4,DIO_OUTPUT);
     6fa:	61 e0       	ldi	r22, 0x01	; 1
     6fc:	85 e0       	ldi	r24, 0x05	; 5
     6fe:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_setPinDir>
	DIO_setPinDir(LCD_D5,DIO_OUTPUT);
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	86 e0       	ldi	r24, 0x06	; 6
     706:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_setPinDir>
	DIO_setPinDir(LCD_D6,DIO_OUTPUT);
     70a:	61 e0       	ldi	r22, 0x01	; 1
     70c:	87 e0       	ldi	r24, 0x07	; 7
     70e:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_setPinDir>
	DIO_setPinDir(LCD_D7,DIO_OUTPUT);
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	8a e0       	ldi	r24, 0x0A	; 10
     716:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_setPinDir>
     71a:	2f ef       	ldi	r18, 0xFF	; 255
     71c:	80 e7       	ldi	r24, 0x70	; 112
     71e:	92 e0       	ldi	r25, 0x02	; 2
     720:	21 50       	subi	r18, 0x01	; 1
     722:	80 40       	sbci	r24, 0x00	; 0
     724:	90 40       	sbci	r25, 0x00	; 0
     726:	e1 f7       	brne	.-8      	; 0x720 <LCD_init+0x3e>
     728:	00 c0       	rjmp	.+0      	; 0x72a <LCD_init+0x48>
     72a:	00 00       	nop
	
	_delay_ms(50);
	LCD_writeCmd(0b00000010);
     72c:	82 e0       	ldi	r24, 0x02	; 2
     72e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <LCD_writeCmd>
	LCD_writeCmd(0b00101000);
     732:	88 e2       	ldi	r24, 0x28	; 40
     734:	0e 94 62 03 	call	0x6c4	; 0x6c4 <LCD_writeCmd>
     738:	8f e9       	ldi	r24, 0x9F	; 159
     73a:	9f e0       	ldi	r25, 0x0F	; 15
     73c:	01 97       	sbiw	r24, 0x01	; 1
     73e:	f1 f7       	brne	.-4      	; 0x73c <LCD_init+0x5a>
     740:	00 c0       	rjmp	.+0      	; 0x742 <LCD_init+0x60>
     742:	00 00       	nop
	_delay_ms(1);
	LCD_writeCmd(0b00001110);
     744:	8e e0       	ldi	r24, 0x0E	; 14
     746:	0e 94 62 03 	call	0x6c4	; 0x6c4 <LCD_writeCmd>
     74a:	8f e9       	ldi	r24, 0x9F	; 159
     74c:	9f e0       	ldi	r25, 0x0F	; 15
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	f1 f7       	brne	.-4      	; 0x74e <LCD_init+0x6c>
     752:	00 c0       	rjmp	.+0      	; 0x754 <LCD_init+0x72>
     754:	00 00       	nop
	_delay_ms(1);
	LCD_writeCmd(0b00000001);
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	0e 94 62 03 	call	0x6c4	; 0x6c4 <LCD_writeCmd>
     75c:	8f e1       	ldi	r24, 0x1F	; 31
     75e:	9e e4       	ldi	r25, 0x4E	; 78
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	f1 f7       	brne	.-4      	; 0x760 <LCD_init+0x7e>
     764:	00 c0       	rjmp	.+0      	; 0x766 <LCD_init+0x84>
     766:	00 00       	nop
	_delay_ms(5);
	LCD_writeCmd(0b00000110);
     768:	86 e0       	ldi	r24, 0x06	; 6
     76a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <LCD_writeCmd>
     76e:	08 95       	ret

00000770 <LCD_writeChar>:
	LCD_sendData(data);
	
}

void LCD_writeChar(u8 data)
{
     770:	cf 93       	push	r28
     772:	c8 2f       	mov	r28, r24
	DIO_setPinValue(LCD_RS,DIO_HIGH);
     774:	61 e0       	ldi	r22, 0x01	; 1
     776:	8d e0       	ldi	r24, 0x0D	; 13
     778:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
	DIO_setPinValue(LCD_RW,DIO_LOW);
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	8c e0       	ldi	r24, 0x0C	; 12
     780:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
	LCD_sendData(data);
     784:	8c 2f       	mov	r24, r28
     786:	0e 94 12 03 	call	0x624	; 0x624 <LCD_sendData>
	
}
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <LCD_writeString>:

void LCD_writeString(u8* str)
{
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	8c 01       	movw	r16, r24
	u8 i=0;
     796:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0' )
     798:	03 c0       	rjmp	.+6      	; 0x7a0 <LCD_writeString+0x12>
	{
		LCD_writeChar(str[i]);
     79a:	0e 94 b8 03 	call	0x770	; 0x770 <LCD_writeChar>
		i++;
     79e:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_writeString(u8* str)
{
	u8 i=0;
	while(str[i] != '\0' )
     7a0:	f8 01       	movw	r30, r16
     7a2:	ec 0f       	add	r30, r28
     7a4:	f1 1d       	adc	r31, r1
     7a6:	80 81       	ld	r24, Z
     7a8:	81 11       	cpse	r24, r1
     7aa:	f7 cf       	rjmp	.-18     	; 0x79a <LCD_writeString+0xc>
	{
		LCD_writeChar(str[i]);
		i++;
	}
}
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	08 95       	ret

000007b4 <LCD_clearDis>:


void LCD_clearDis()
{
	LCD_writeCmd(0b00000001);
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	0e 94 62 03 	call	0x6c4	; 0x6c4 <LCD_writeCmd>
     7ba:	8f e9       	ldi	r24, 0x9F	; 159
     7bc:	9f e0       	ldi	r25, 0x0F	; 15
     7be:	01 97       	sbiw	r24, 0x01	; 1
     7c0:	f1 f7       	brne	.-4      	; 0x7be <LCD_clearDis+0xa>
     7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <LCD_clearDis+0x10>
     7c4:	00 00       	nop
     7c6:	08 95       	ret

000007c8 <LCD_writeNum>:
	_delay_ms(1);
}


void LCD_writeNum(s32 num)
{
     7c8:	ef 92       	push	r14
     7ca:	ff 92       	push	r15
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	60 97       	sbiw	r28, 0x10	; 16
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
     7e2:	7c 01       	movw	r14, r24
	if(num == 0)
     7e4:	00 97       	sbiw	r24, 0x00	; 0
     7e6:	21 f4       	brne	.+8      	; 0x7f0 <LCD_writeNum+0x28>
	{
		LCD_writeChar('0');
     7e8:	80 e3       	ldi	r24, 0x30	; 48
     7ea:	0e 94 b8 03 	call	0x770	; 0x770 <LCD_writeChar>
     7ee:	2d c0       	rjmp	.+90     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
		return;
	}
	
	if(num<0)
     7f0:	99 23       	and	r25, r25
     7f2:	34 f4       	brge	.+12     	; 0x800 <__DATA_REGION_LENGTH__>
	{
		LCD_writeChar('-');
     7f4:	8d e2       	ldi	r24, 0x2D	; 45
     7f6:	0e 94 b8 03 	call	0x770	; 0x770 <LCD_writeChar>
		num = num * (-1);
     7fa:	f1 94       	neg	r15
     7fc:	e1 94       	neg	r14
     7fe:	f1 08       	sbc	r15, r1
	_delay_ms(1);
}


void LCD_writeNum(s32 num)
{
     800:	10 e0       	ldi	r17, 0x00	; 0
     802:	10 c0       	rjmp	.+32     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
	}
	u8 x=0,i=0;
	u8 arr[16];
	while( num != 0)
	{
		x=num % 10;
     804:	c7 01       	movw	r24, r14
     806:	6a e0       	ldi	r22, 0x0A	; 10
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	0e 94 34 09 	call	0x1268	; 0x1268 <__divmodhi4>
		arr[i] = (x+48);
     80e:	e1 e0       	ldi	r30, 0x01	; 1
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	ec 0f       	add	r30, r28
     814:	fd 1f       	adc	r31, r29
     816:	e1 0f       	add	r30, r17
     818:	f1 1d       	adc	r31, r1
     81a:	80 5d       	subi	r24, 0xD0	; 208
     81c:	80 83       	st	Z, r24
		i++;
     81e:	1f 5f       	subi	r17, 0xFF	; 255
		num = num /10;
     820:	e6 2e       	mov	r14, r22
     822:	f7 2e       	mov	r15, r23
		LCD_writeChar('-');
		num = num * (-1);
	}
	u8 x=0,i=0;
	u8 arr[16];
	while( num != 0)
     824:	e1 14       	cp	r14, r1
     826:	f1 04       	cpc	r15, r1
     828:	69 f7       	brne	.-38     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
		i++;
		num = num /10;
	}
	
	s8 k;
	for(k=i-1 ;k>=0 ;k--)
     82a:	11 50       	subi	r17, 0x01	; 1
     82c:	0c c0       	rjmp	.+24     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
	{
		LCD_writeChar(arr[k]);
     82e:	e1 e0       	ldi	r30, 0x01	; 1
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	ec 0f       	add	r30, r28
     834:	fd 1f       	adc	r31, r29
     836:	e1 0f       	add	r30, r17
     838:	f1 1d       	adc	r31, r1
     83a:	17 fd       	sbrc	r17, 7
     83c:	fa 95       	dec	r31
     83e:	80 81       	ld	r24, Z
     840:	0e 94 b8 03 	call	0x770	; 0x770 <LCD_writeChar>
		i++;
		num = num /10;
	}
	
	s8 k;
	for(k=i-1 ;k>=0 ;k--)
     844:	11 50       	subi	r17, 0x01	; 1
     846:	11 23       	and	r17, r17
     848:	94 f7       	brge	.-28     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
	{
		LCD_writeChar(arr[k]);
	} 
	
}
     84a:	60 96       	adiw	r28, 0x10	; 16
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	f8 94       	cli
     850:	de bf       	out	0x3e, r29	; 62
     852:	0f be       	out	0x3f, r0	; 63
     854:	cd bf       	out	0x3d, r28	; 61
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	08 95       	ret

00000862 <LCD_goto>:


void LCD_goto(u8 x,u8 line)
{
	if(line == 1)
     862:	61 30       	cpi	r22, 0x01	; 1
     864:	21 f4       	brne	.+8      	; 0x86e <LCD_goto+0xc>
	{
		LCD_writeCmd(10000000 + x);
     866:	80 58       	subi	r24, 0x80	; 128
     868:	0e 94 62 03 	call	0x6c4	; 0x6c4 <LCD_writeCmd>
     86c:	08 95       	ret
	}
	
	else if(line == 2)
     86e:	62 30       	cpi	r22, 0x02	; 2
     870:	19 f4       	brne	.+6      	; 0x878 <LCD_goto+0x16>
	{
		LCD_writeCmd(10000000 + x + 0x40);
     872:	80 54       	subi	r24, 0x40	; 64
     874:	0e 94 62 03 	call	0x6c4	; 0x6c4 <LCD_writeCmd>
     878:	08 95       	ret

0000087a <ADC_init>:
#include "ADC_INTERFACE.h"

void ADC_init()
{
	//set VCC
	SET_BIT(ADMUX,REFS0);
     87a:	87 b1       	in	r24, 0x07	; 7
     87c:	80 64       	ori	r24, 0x40	; 64
     87e:	87 b9       	out	0x07, r24	; 7
	CLEAR_BIT(ADMUX,REFS1);
     880:	87 b1       	in	r24, 0x07	; 7
     882:	8f 77       	andi	r24, 0x7F	; 127
     884:	87 b9       	out	0x07, r24	; 7
	
	//pre scaler
	SET_BIT(ADCSRA,ADPS0);
     886:	86 b1       	in	r24, 0x06	; 6
     888:	81 60       	ori	r24, 0x01	; 1
     88a:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS1);
     88c:	86 b1       	in	r24, 0x06	; 6
     88e:	82 60       	ori	r24, 0x02	; 2
     890:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS2);
     892:	86 b1       	in	r24, 0x06	; 6
     894:	84 60       	ori	r24, 0x04	; 4
     896:	86 b9       	out	0x06, r24	; 6
	
	//enable
	SET_BIT(ADCSRA,ADEN);
     898:	86 b1       	in	r24, 0x06	; 6
     89a:	80 68       	ori	r24, 0x80	; 128
     89c:	86 b9       	out	0x06, r24	; 6
     89e:	08 95       	ret

000008a0 <ADC_read>:
}


u16 ADC_read(u8 ch)   //return digital
{
	if(ch == ADC0)
     8a0:	81 11       	cpse	r24, r1
     8a2:	10 c0       	rjmp	.+32     	; 0x8c4 <ADC_read+0x24>
	{
		CLEAR_BIT(ADMUX,MUX0);
     8a4:	87 b1       	in	r24, 0x07	; 7
     8a6:	8e 7f       	andi	r24, 0xFE	; 254
     8a8:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX1);
     8aa:	87 b1       	in	r24, 0x07	; 7
     8ac:	8d 7f       	andi	r24, 0xFD	; 253
     8ae:	87 b9       	out	0x07, r24	; 7
        CLEAR_BIT(ADMUX,MUX2);
     8b0:	87 b1       	in	r24, 0x07	; 7
     8b2:	8b 7f       	andi	r24, 0xFB	; 251
     8b4:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX3);
     8b6:	87 b1       	in	r24, 0x07	; 7
     8b8:	87 7f       	andi	r24, 0xF7	; 247
     8ba:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX4);
     8bc:	87 b1       	in	r24, 0x07	; 7
     8be:	8f 7e       	andi	r24, 0xEF	; 239
     8c0:	87 b9       	out	0x07, r24	; 7
     8c2:	47 c0       	rjmp	.+142    	; 0x952 <ADC_read+0xb2>
	}
	
	else if(ch == ADC1)
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	81 f4       	brne	.+32     	; 0x8e8 <ADC_read+0x48>
	{
		SET_BIT(ADMUX,MUX0);
     8c8:	87 b1       	in	r24, 0x07	; 7
     8ca:	81 60       	ori	r24, 0x01	; 1
     8cc:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX1);
     8ce:	87 b1       	in	r24, 0x07	; 7
     8d0:	8d 7f       	andi	r24, 0xFD	; 253
     8d2:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX2);
     8d4:	87 b1       	in	r24, 0x07	; 7
     8d6:	8b 7f       	andi	r24, 0xFB	; 251
     8d8:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX3);
     8da:	87 b1       	in	r24, 0x07	; 7
     8dc:	87 7f       	andi	r24, 0xF7	; 247
     8de:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX4);
     8e0:	87 b1       	in	r24, 0x07	; 7
     8e2:	8f 7e       	andi	r24, 0xEF	; 239
     8e4:	87 b9       	out	0x07, r24	; 7
     8e6:	35 c0       	rjmp	.+106    	; 0x952 <ADC_read+0xb2>
	}
	
	else if(ch == ADC2)
     8e8:	82 30       	cpi	r24, 0x02	; 2
     8ea:	81 f4       	brne	.+32     	; 0x90c <ADC_read+0x6c>
	{
		CLEAR_BIT(ADMUX,MUX0);
     8ec:	87 b1       	in	r24, 0x07	; 7
     8ee:	8e 7f       	andi	r24, 0xFE	; 254
     8f0:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX,MUX1);
     8f2:	87 b1       	in	r24, 0x07	; 7
     8f4:	82 60       	ori	r24, 0x02	; 2
     8f6:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX2);
     8f8:	87 b1       	in	r24, 0x07	; 7
     8fa:	8b 7f       	andi	r24, 0xFB	; 251
     8fc:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX3);
     8fe:	87 b1       	in	r24, 0x07	; 7
     900:	87 7f       	andi	r24, 0xF7	; 247
     902:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX4);
     904:	87 b1       	in	r24, 0x07	; 7
     906:	8f 7e       	andi	r24, 0xEF	; 239
     908:	87 b9       	out	0x07, r24	; 7
     90a:	23 c0       	rjmp	.+70     	; 0x952 <ADC_read+0xb2>
	}
	else if(ch == ADC3)
     90c:	83 30       	cpi	r24, 0x03	; 3
     90e:	81 f4       	brne	.+32     	; 0x930 <ADC_read+0x90>
	{
		SET_BIT(ADMUX,MUX0);
     910:	87 b1       	in	r24, 0x07	; 7
     912:	81 60       	ori	r24, 0x01	; 1
     914:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX,MUX1);
     916:	87 b1       	in	r24, 0x07	; 7
     918:	82 60       	ori	r24, 0x02	; 2
     91a:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX2);
     91c:	87 b1       	in	r24, 0x07	; 7
     91e:	8b 7f       	andi	r24, 0xFB	; 251
     920:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX3);
     922:	87 b1       	in	r24, 0x07	; 7
     924:	87 7f       	andi	r24, 0xF7	; 247
     926:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX4);
     928:	87 b1       	in	r24, 0x07	; 7
     92a:	8f 7e       	andi	r24, 0xEF	; 239
     92c:	87 b9       	out	0x07, r24	; 7
     92e:	11 c0       	rjmp	.+34     	; 0x952 <ADC_read+0xb2>
	}
	else if(ch == ADC4)
     930:	84 30       	cpi	r24, 0x04	; 4
     932:	79 f4       	brne	.+30     	; 0x952 <ADC_read+0xb2>
	{
		CLEAR_BIT(ADMUX,MUX0);
     934:	87 b1       	in	r24, 0x07	; 7
     936:	8e 7f       	andi	r24, 0xFE	; 254
     938:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX1);
     93a:	87 b1       	in	r24, 0x07	; 7
     93c:	8d 7f       	andi	r24, 0xFD	; 253
     93e:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX,MUX2);
     940:	87 b1       	in	r24, 0x07	; 7
     942:	84 60       	ori	r24, 0x04	; 4
     944:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX3);
     946:	87 b1       	in	r24, 0x07	; 7
     948:	87 7f       	andi	r24, 0xF7	; 247
     94a:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX4);
     94c:	87 b1       	in	r24, 0x07	; 7
     94e:	8f 7e       	andi	r24, 0xEF	; 239
     950:	87 b9       	out	0x07, r24	; 7
	}
	
	
	SET_BIT(ADCSRA,ADSC);
     952:	86 b1       	in	r24, 0x06	; 6
     954:	80 64       	ori	r24, 0x40	; 64
     956:	86 b9       	out	0x06, r24	; 6
	while( GET_BIT(ADCSRA,ADSC) == 1);
     958:	36 99       	sbic	0x06, 6	; 6
     95a:	fe cf       	rjmp	.-4      	; 0x958 <ADC_read+0xb8>
	
	return ADCLH;
     95c:	84 b1       	in	r24, 0x04	; 4
     95e:	95 b1       	in	r25, 0x05	; 5
}
     960:	08 95       	ret

00000962 <ADC_convertAnalog>:


f32 ADC_convertAnalog(u16 digitalValue)  //return analog
{
	return (digitalValue * (5.0 / 1024));
     962:	bc 01       	movw	r22, r24
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 25 08 	call	0x104a	; 0x104a <__floatunsisf>
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	40 ea       	ldi	r20, 0xA0	; 160
     972:	5b e3       	ldi	r21, 0x3B	; 59
     974:	0e 94 b3 08 	call	0x1166	; 0x1166 <__mulsf3>
}
     978:	08 95       	ret

0000097a <DIO_setPinValue>:
}


void DIO_setPinPullup(u8 PinNum)
{
	DIO_setPinValue(PinNum,DIO_HIGH);
     97a:	88 30       	cpi	r24, 0x08	; 8
     97c:	f8 f4       	brcc	.+62     	; 0x9bc <DIO_setPinValue+0x42>
     97e:	61 30       	cpi	r22, 0x01	; 1
     980:	69 f4       	brne	.+26     	; 0x99c <DIO_setPinValue+0x22>
     982:	4b b3       	in	r20, 0x1b	; 27
     984:	21 e0       	ldi	r18, 0x01	; 1
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	b9 01       	movw	r22, r18
     98a:	02 c0       	rjmp	.+4      	; 0x990 <DIO_setPinValue+0x16>
     98c:	66 0f       	add	r22, r22
     98e:	77 1f       	adc	r23, r23
     990:	8a 95       	dec	r24
     992:	e2 f7       	brpl	.-8      	; 0x98c <DIO_setPinValue+0x12>
     994:	cb 01       	movw	r24, r22
     996:	84 2b       	or	r24, r20
     998:	8b bb       	out	0x1b, r24	; 27
     99a:	08 95       	ret
     99c:	61 11       	cpse	r22, r1
     99e:	75 c0       	rjmp	.+234    	; 0xa8a <DIO_setPinValue+0x110>
     9a0:	4b b3       	in	r20, 0x1b	; 27
     9a2:	21 e0       	ldi	r18, 0x01	; 1
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	b9 01       	movw	r22, r18
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <DIO_setPinValue+0x34>
     9aa:	66 0f       	add	r22, r22
     9ac:	77 1f       	adc	r23, r23
     9ae:	8a 95       	dec	r24
     9b0:	e2 f7       	brpl	.-8      	; 0x9aa <DIO_setPinValue+0x30>
     9b2:	cb 01       	movw	r24, r22
     9b4:	80 95       	com	r24
     9b6:	84 23       	and	r24, r20
     9b8:	8b bb       	out	0x1b, r24	; 27
     9ba:	08 95       	ret
     9bc:	98 ef       	ldi	r25, 0xF8	; 248
     9be:	98 0f       	add	r25, r24
     9c0:	98 30       	cpi	r25, 0x08	; 8
     9c2:	f8 f4       	brcc	.+62     	; 0xa02 <DIO_setPinValue+0x88>
     9c4:	61 30       	cpi	r22, 0x01	; 1
     9c6:	69 f4       	brne	.+26     	; 0x9e2 <DIO_setPinValue+0x68>
     9c8:	48 b3       	in	r20, 0x18	; 24
     9ca:	21 e0       	ldi	r18, 0x01	; 1
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	b9 01       	movw	r22, r18
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <DIO_setPinValue+0x5c>
     9d2:	66 0f       	add	r22, r22
     9d4:	77 1f       	adc	r23, r23
     9d6:	9a 95       	dec	r25
     9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <DIO_setPinValue+0x58>
     9da:	cb 01       	movw	r24, r22
     9dc:	84 2b       	or	r24, r20
     9de:	88 bb       	out	0x18, r24	; 24
     9e0:	08 95       	ret
     9e2:	61 11       	cpse	r22, r1
     9e4:	52 c0       	rjmp	.+164    	; 0xa8a <DIO_setPinValue+0x110>
     9e6:	48 b3       	in	r20, 0x18	; 24
     9e8:	21 e0       	ldi	r18, 0x01	; 1
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	b9 01       	movw	r22, r18
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <DIO_setPinValue+0x7a>
     9f0:	66 0f       	add	r22, r22
     9f2:	77 1f       	adc	r23, r23
     9f4:	9a 95       	dec	r25
     9f6:	e2 f7       	brpl	.-8      	; 0x9f0 <DIO_setPinValue+0x76>
     9f8:	cb 01       	movw	r24, r22
     9fa:	80 95       	com	r24
     9fc:	84 23       	and	r24, r20
     9fe:	88 bb       	out	0x18, r24	; 24
     a00:	08 95       	ret
     a02:	90 ef       	ldi	r25, 0xF0	; 240
     a04:	98 0f       	add	r25, r24
     a06:	98 30       	cpi	r25, 0x08	; 8
     a08:	f8 f4       	brcc	.+62     	; 0xa48 <DIO_setPinValue+0xce>
     a0a:	61 30       	cpi	r22, 0x01	; 1
     a0c:	69 f4       	brne	.+26     	; 0xa28 <DIO_setPinValue+0xae>
     a0e:	45 b3       	in	r20, 0x15	; 21
     a10:	21 e0       	ldi	r18, 0x01	; 1
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	b9 01       	movw	r22, r18
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <DIO_setPinValue+0xa2>
     a18:	66 0f       	add	r22, r22
     a1a:	77 1f       	adc	r23, r23
     a1c:	9a 95       	dec	r25
     a1e:	e2 f7       	brpl	.-8      	; 0xa18 <DIO_setPinValue+0x9e>
     a20:	cb 01       	movw	r24, r22
     a22:	84 2b       	or	r24, r20
     a24:	85 bb       	out	0x15, r24	; 21
     a26:	08 95       	ret
     a28:	61 11       	cpse	r22, r1
     a2a:	2f c0       	rjmp	.+94     	; 0xa8a <DIO_setPinValue+0x110>
     a2c:	45 b3       	in	r20, 0x15	; 21
     a2e:	21 e0       	ldi	r18, 0x01	; 1
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	b9 01       	movw	r22, r18
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <DIO_setPinValue+0xc0>
     a36:	66 0f       	add	r22, r22
     a38:	77 1f       	adc	r23, r23
     a3a:	9a 95       	dec	r25
     a3c:	e2 f7       	brpl	.-8      	; 0xa36 <DIO_setPinValue+0xbc>
     a3e:	cb 01       	movw	r24, r22
     a40:	80 95       	com	r24
     a42:	84 23       	and	r24, r20
     a44:	85 bb       	out	0x15, r24	; 21
     a46:	08 95       	ret
     a48:	88 51       	subi	r24, 0x18	; 24
     a4a:	88 30       	cpi	r24, 0x08	; 8
     a4c:	f0 f4       	brcc	.+60     	; 0xa8a <DIO_setPinValue+0x110>
     a4e:	61 30       	cpi	r22, 0x01	; 1
     a50:	69 f4       	brne	.+26     	; 0xa6c <DIO_setPinValue+0xf2>
     a52:	42 b3       	in	r20, 0x12	; 18
     a54:	21 e0       	ldi	r18, 0x01	; 1
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	b9 01       	movw	r22, r18
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <DIO_setPinValue+0xe6>
     a5c:	66 0f       	add	r22, r22
     a5e:	77 1f       	adc	r23, r23
     a60:	8a 95       	dec	r24
     a62:	e2 f7       	brpl	.-8      	; 0xa5c <DIO_setPinValue+0xe2>
     a64:	cb 01       	movw	r24, r22
     a66:	84 2b       	or	r24, r20
     a68:	82 bb       	out	0x12, r24	; 18
     a6a:	08 95       	ret
     a6c:	61 11       	cpse	r22, r1
     a6e:	0d c0       	rjmp	.+26     	; 0xa8a <DIO_setPinValue+0x110>
     a70:	42 b3       	in	r20, 0x12	; 18
     a72:	21 e0       	ldi	r18, 0x01	; 1
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	b9 01       	movw	r22, r18
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <DIO_setPinValue+0x104>
     a7a:	66 0f       	add	r22, r22
     a7c:	77 1f       	adc	r23, r23
     a7e:	8a 95       	dec	r24
     a80:	e2 f7       	brpl	.-8      	; 0xa7a <DIO_setPinValue+0x100>
     a82:	cb 01       	movw	r24, r22
     a84:	80 95       	com	r24
     a86:	84 23       	and	r24, r20
     a88:	82 bb       	out	0x12, r24	; 18
     a8a:	08 95       	ret

00000a8c <DIO_setPinDir>:
     a8c:	88 30       	cpi	r24, 0x08	; 8
     a8e:	f8 f4       	brcc	.+62     	; 0xace <DIO_setPinDir+0x42>
     a90:	61 30       	cpi	r22, 0x01	; 1
     a92:	69 f4       	brne	.+26     	; 0xaae <DIO_setPinDir+0x22>
     a94:	4a b3       	in	r20, 0x1a	; 26
     a96:	21 e0       	ldi	r18, 0x01	; 1
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	b9 01       	movw	r22, r18
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <DIO_setPinDir+0x16>
     a9e:	66 0f       	add	r22, r22
     aa0:	77 1f       	adc	r23, r23
     aa2:	8a 95       	dec	r24
     aa4:	e2 f7       	brpl	.-8      	; 0xa9e <DIO_setPinDir+0x12>
     aa6:	cb 01       	movw	r24, r22
     aa8:	84 2b       	or	r24, r20
     aaa:	8a bb       	out	0x1a, r24	; 26
     aac:	08 95       	ret
     aae:	61 11       	cpse	r22, r1
     ab0:	75 c0       	rjmp	.+234    	; 0xb9c <DIO_setPinDir+0x110>
     ab2:	4a b3       	in	r20, 0x1a	; 26
     ab4:	21 e0       	ldi	r18, 0x01	; 1
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	b9 01       	movw	r22, r18
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <DIO_setPinDir+0x34>
     abc:	66 0f       	add	r22, r22
     abe:	77 1f       	adc	r23, r23
     ac0:	8a 95       	dec	r24
     ac2:	e2 f7       	brpl	.-8      	; 0xabc <DIO_setPinDir+0x30>
     ac4:	cb 01       	movw	r24, r22
     ac6:	80 95       	com	r24
     ac8:	84 23       	and	r24, r20
     aca:	8a bb       	out	0x1a, r24	; 26
     acc:	08 95       	ret
     ace:	98 ef       	ldi	r25, 0xF8	; 248
     ad0:	98 0f       	add	r25, r24
     ad2:	98 30       	cpi	r25, 0x08	; 8
     ad4:	f8 f4       	brcc	.+62     	; 0xb14 <DIO_setPinDir+0x88>
     ad6:	61 30       	cpi	r22, 0x01	; 1
     ad8:	69 f4       	brne	.+26     	; 0xaf4 <DIO_setPinDir+0x68>
     ada:	47 b3       	in	r20, 0x17	; 23
     adc:	21 e0       	ldi	r18, 0x01	; 1
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	b9 01       	movw	r22, r18
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <DIO_setPinDir+0x5c>
     ae4:	66 0f       	add	r22, r22
     ae6:	77 1f       	adc	r23, r23
     ae8:	9a 95       	dec	r25
     aea:	e2 f7       	brpl	.-8      	; 0xae4 <DIO_setPinDir+0x58>
     aec:	cb 01       	movw	r24, r22
     aee:	84 2b       	or	r24, r20
     af0:	87 bb       	out	0x17, r24	; 23
     af2:	08 95       	ret
     af4:	61 11       	cpse	r22, r1
     af6:	52 c0       	rjmp	.+164    	; 0xb9c <DIO_setPinDir+0x110>
     af8:	47 b3       	in	r20, 0x17	; 23
     afa:	21 e0       	ldi	r18, 0x01	; 1
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	b9 01       	movw	r22, r18
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <DIO_setPinDir+0x7a>
     b02:	66 0f       	add	r22, r22
     b04:	77 1f       	adc	r23, r23
     b06:	9a 95       	dec	r25
     b08:	e2 f7       	brpl	.-8      	; 0xb02 <DIO_setPinDir+0x76>
     b0a:	cb 01       	movw	r24, r22
     b0c:	80 95       	com	r24
     b0e:	84 23       	and	r24, r20
     b10:	87 bb       	out	0x17, r24	; 23
     b12:	08 95       	ret
     b14:	90 ef       	ldi	r25, 0xF0	; 240
     b16:	98 0f       	add	r25, r24
     b18:	98 30       	cpi	r25, 0x08	; 8
     b1a:	f8 f4       	brcc	.+62     	; 0xb5a <DIO_setPinDir+0xce>
     b1c:	61 30       	cpi	r22, 0x01	; 1
     b1e:	69 f4       	brne	.+26     	; 0xb3a <DIO_setPinDir+0xae>
     b20:	44 b3       	in	r20, 0x14	; 20
     b22:	21 e0       	ldi	r18, 0x01	; 1
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	b9 01       	movw	r22, r18
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <DIO_setPinDir+0xa2>
     b2a:	66 0f       	add	r22, r22
     b2c:	77 1f       	adc	r23, r23
     b2e:	9a 95       	dec	r25
     b30:	e2 f7       	brpl	.-8      	; 0xb2a <DIO_setPinDir+0x9e>
     b32:	cb 01       	movw	r24, r22
     b34:	84 2b       	or	r24, r20
     b36:	84 bb       	out	0x14, r24	; 20
     b38:	08 95       	ret
     b3a:	61 11       	cpse	r22, r1
     b3c:	2f c0       	rjmp	.+94     	; 0xb9c <DIO_setPinDir+0x110>
     b3e:	44 b3       	in	r20, 0x14	; 20
     b40:	21 e0       	ldi	r18, 0x01	; 1
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	b9 01       	movw	r22, r18
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <DIO_setPinDir+0xc0>
     b48:	66 0f       	add	r22, r22
     b4a:	77 1f       	adc	r23, r23
     b4c:	9a 95       	dec	r25
     b4e:	e2 f7       	brpl	.-8      	; 0xb48 <DIO_setPinDir+0xbc>
     b50:	cb 01       	movw	r24, r22
     b52:	80 95       	com	r24
     b54:	84 23       	and	r24, r20
     b56:	84 bb       	out	0x14, r24	; 20
     b58:	08 95       	ret
     b5a:	88 51       	subi	r24, 0x18	; 24
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	f0 f4       	brcc	.+60     	; 0xb9c <DIO_setPinDir+0x110>
     b60:	61 30       	cpi	r22, 0x01	; 1
     b62:	69 f4       	brne	.+26     	; 0xb7e <DIO_setPinDir+0xf2>
     b64:	41 b3       	in	r20, 0x11	; 17
     b66:	21 e0       	ldi	r18, 0x01	; 1
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	b9 01       	movw	r22, r18
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <DIO_setPinDir+0xe6>
     b6e:	66 0f       	add	r22, r22
     b70:	77 1f       	adc	r23, r23
     b72:	8a 95       	dec	r24
     b74:	e2 f7       	brpl	.-8      	; 0xb6e <DIO_setPinDir+0xe2>
     b76:	cb 01       	movw	r24, r22
     b78:	84 2b       	or	r24, r20
     b7a:	81 bb       	out	0x11, r24	; 17
     b7c:	08 95       	ret
     b7e:	61 11       	cpse	r22, r1
     b80:	0d c0       	rjmp	.+26     	; 0xb9c <DIO_setPinDir+0x110>
     b82:	41 b3       	in	r20, 0x11	; 17
     b84:	21 e0       	ldi	r18, 0x01	; 1
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	b9 01       	movw	r22, r18
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <DIO_setPinDir+0x104>
     b8c:	66 0f       	add	r22, r22
     b8e:	77 1f       	adc	r23, r23
     b90:	8a 95       	dec	r24
     b92:	e2 f7       	brpl	.-8      	; 0xb8c <DIO_setPinDir+0x100>
     b94:	cb 01       	movw	r24, r22
     b96:	80 95       	com	r24
     b98:	84 23       	and	r24, r20
     b9a:	81 bb       	out	0x11, r24	; 17
     b9c:	08 95       	ret

00000b9e <DIO_readPinValue>:
     b9e:	88 30       	cpi	r24, 0x08	; 8
     ba0:	58 f4       	brcc	.+22     	; 0xbb8 <DIO_readPinValue+0x1a>
     ba2:	29 b3       	in	r18, 0x19	; 25
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	a9 01       	movw	r20, r18
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <DIO_readPinValue+0x10>
     baa:	55 95       	asr	r21
     bac:	47 95       	ror	r20
     bae:	8a 95       	dec	r24
     bb0:	e2 f7       	brpl	.-8      	; 0xbaa <DIO_readPinValue+0xc>
     bb2:	ca 01       	movw	r24, r20
     bb4:	81 70       	andi	r24, 0x01	; 1
     bb6:	08 95       	ret
     bb8:	28 ef       	ldi	r18, 0xF8	; 248
     bba:	28 0f       	add	r18, r24
     bbc:	28 30       	cpi	r18, 0x08	; 8
     bbe:	48 f4       	brcc	.+18     	; 0xbd2 <DIO_readPinValue+0x34>
     bc0:	86 b3       	in	r24, 0x16	; 22
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <DIO_readPinValue+0x2c>
     bc6:	95 95       	asr	r25
     bc8:	87 95       	ror	r24
     bca:	2a 95       	dec	r18
     bcc:	e2 f7       	brpl	.-8      	; 0xbc6 <DIO_readPinValue+0x28>
     bce:	81 70       	andi	r24, 0x01	; 1
     bd0:	08 95       	ret
     bd2:	20 ef       	ldi	r18, 0xF0	; 240
     bd4:	28 0f       	add	r18, r24
     bd6:	28 30       	cpi	r18, 0x08	; 8
     bd8:	48 f4       	brcc	.+18     	; 0xbec <DIO_readPinValue+0x4e>
     bda:	83 b3       	in	r24, 0x13	; 19
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <DIO_readPinValue+0x46>
     be0:	95 95       	asr	r25
     be2:	87 95       	ror	r24
     be4:	2a 95       	dec	r18
     be6:	e2 f7       	brpl	.-8      	; 0xbe0 <DIO_readPinValue+0x42>
     be8:	81 70       	andi	r24, 0x01	; 1
     bea:	08 95       	ret
     bec:	28 ee       	ldi	r18, 0xE8	; 232
     bee:	28 0f       	add	r18, r24
     bf0:	28 30       	cpi	r18, 0x08	; 8
     bf2:	50 f4       	brcc	.+20     	; 0xc08 <DIO_readPinValue+0x6a>
     bf4:	90 b3       	in	r25, 0x10	; 16
     bf6:	89 2f       	mov	r24, r25
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <DIO_readPinValue+0x62>
     bfc:	95 95       	asr	r25
     bfe:	87 95       	ror	r24
     c00:	2a 95       	dec	r18
     c02:	e2 f7       	brpl	.-8      	; 0xbfc <DIO_readPinValue+0x5e>
     c04:	81 70       	andi	r24, 0x01	; 1
     c06:	08 95       	ret
     c08:	08 95       	ret

00000c0a <DIO_togglePin>:
}

void DIO_togglePin(u8 pinNum)
{
     c0a:	cf 93       	push	r28
     c0c:	c8 2f       	mov	r28, r24
	if(DIO_readPinValue(pinNum) ==DIO_HIGH)
     c0e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <DIO_readPinValue>
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	29 f4       	brne	.+10     	; 0xc20 <DIO_togglePin+0x16>
	{
		DIO_setPinValue(pinNum, DIO_LOW);
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	8c 2f       	mov	r24, r28
     c1a:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
     c1e:	09 c0       	rjmp	.+18     	; 0xc32 <DIO_togglePin+0x28>
	}
	else if(DIO_readPinValue(pinNum) ==DIO_LOW)
     c20:	8c 2f       	mov	r24, r28
     c22:	0e 94 cf 05 	call	0xb9e	; 0xb9e <DIO_readPinValue>
     c26:	81 11       	cpse	r24, r1
     c28:	04 c0       	rjmp	.+8      	; 0xc32 <DIO_togglePin+0x28>
	{
		DIO_setPinValue(pinNum, DIO_HIGH);
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	8c 2f       	mov	r24, r28
     c2e:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_setPinValue>
	}
}
     c32:	cf 91       	pop	r28
     c34:	08 95       	ret

00000c36 <EXT0_init>:
void (*INT1_ptr)();
void (*INT0_ptr)();

void EXT_setCallbackInt1(void(*ptr)())
{
	INT1_ptr=ptr;
     c36:	83 30       	cpi	r24, 0x03	; 3
     c38:	39 f4       	brne	.+14     	; 0xc48 <EXT0_init+0x12>
     c3a:	85 b7       	in	r24, 0x35	; 53
     c3c:	81 60       	ori	r24, 0x01	; 1
     c3e:	85 bf       	out	0x35, r24	; 53
     c40:	85 b7       	in	r24, 0x35	; 53
     c42:	82 60       	ori	r24, 0x02	; 2
     c44:	85 bf       	out	0x35, r24	; 53
     c46:	1a c0       	rjmp	.+52     	; 0xc7c <EXT0_init+0x46>
     c48:	82 30       	cpi	r24, 0x02	; 2
     c4a:	39 f4       	brne	.+14     	; 0xc5a <EXT0_init+0x24>
     c4c:	85 b7       	in	r24, 0x35	; 53
     c4e:	8e 7f       	andi	r24, 0xFE	; 254
     c50:	85 bf       	out	0x35, r24	; 53
     c52:	85 b7       	in	r24, 0x35	; 53
     c54:	82 60       	ori	r24, 0x02	; 2
     c56:	85 bf       	out	0x35, r24	; 53
     c58:	11 c0       	rjmp	.+34     	; 0xc7c <EXT0_init+0x46>
     c5a:	81 11       	cpse	r24, r1
     c5c:	07 c0       	rjmp	.+14     	; 0xc6c <EXT0_init+0x36>
     c5e:	85 b7       	in	r24, 0x35	; 53
     c60:	8e 7f       	andi	r24, 0xFE	; 254
     c62:	85 bf       	out	0x35, r24	; 53
     c64:	85 b7       	in	r24, 0x35	; 53
     c66:	8d 7f       	andi	r24, 0xFD	; 253
     c68:	85 bf       	out	0x35, r24	; 53
     c6a:	08 c0       	rjmp	.+16     	; 0xc7c <EXT0_init+0x46>
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	31 f4       	brne	.+12     	; 0xc7c <EXT0_init+0x46>
     c70:	85 b7       	in	r24, 0x35	; 53
     c72:	81 60       	ori	r24, 0x01	; 1
     c74:	85 bf       	out	0x35, r24	; 53
     c76:	85 b7       	in	r24, 0x35	; 53
     c78:	8d 7f       	andi	r24, 0xFD	; 253
     c7a:	85 bf       	out	0x35, r24	; 53
     c7c:	8b b7       	in	r24, 0x3b	; 59
     c7e:	80 64       	ori	r24, 0x40	; 64
     c80:	8b bf       	out	0x3b, r24	; 59
     c82:	08 95       	ret

00000c84 <EXT_setCallbackInt0>:
}

void EXT_setCallbackInt0(void(*ptr)())
{
	INT0_ptr = ptr;
     c84:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <INT0_ptr+0x1>
     c88:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <INT0_ptr>
     c8c:	08 95       	ret

00000c8e <__vector_1>:
}

void __vector_1(void) __attribute__((signal,used));
void __vector_1(void)
{
     c8e:	1f 92       	push	r1
     c90:	0f 92       	push	r0
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	0f 92       	push	r0
     c96:	11 24       	eor	r1, r1
     c98:	2f 93       	push	r18
     c9a:	3f 93       	push	r19
     c9c:	4f 93       	push	r20
     c9e:	5f 93       	push	r21
     ca0:	6f 93       	push	r22
     ca2:	7f 93       	push	r23
     ca4:	8f 93       	push	r24
     ca6:	9f 93       	push	r25
     ca8:	af 93       	push	r26
     caa:	bf 93       	push	r27
     cac:	ef 93       	push	r30
     cae:	ff 93       	push	r31
	INT0_ptr();
     cb0:	e0 91 a5 00 	lds	r30, 0x00A5	; 0x8000a5 <INT0_ptr>
     cb4:	f0 91 a6 00 	lds	r31, 0x00A6	; 0x8000a6 <INT0_ptr+0x1>
     cb8:	09 95       	icall
}
     cba:	ff 91       	pop	r31
     cbc:	ef 91       	pop	r30
     cbe:	bf 91       	pop	r27
     cc0:	af 91       	pop	r26
     cc2:	9f 91       	pop	r25
     cc4:	8f 91       	pop	r24
     cc6:	7f 91       	pop	r23
     cc8:	6f 91       	pop	r22
     cca:	5f 91       	pop	r21
     ccc:	4f 91       	pop	r20
     cce:	3f 91       	pop	r19
     cd0:	2f 91       	pop	r18
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	0f 90       	pop	r0
     cd8:	1f 90       	pop	r1
     cda:	18 95       	reti

00000cdc <__vector_2>:

void __vector_2(void) __attribute__((signal,used));
void __vector_2(void)
{
     cdc:	1f 92       	push	r1
     cde:	0f 92       	push	r0
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	0f 92       	push	r0
     ce4:	11 24       	eor	r1, r1
     ce6:	2f 93       	push	r18
     ce8:	3f 93       	push	r19
     cea:	4f 93       	push	r20
     cec:	5f 93       	push	r21
     cee:	6f 93       	push	r22
     cf0:	7f 93       	push	r23
     cf2:	8f 93       	push	r24
     cf4:	9f 93       	push	r25
     cf6:	af 93       	push	r26
     cf8:	bf 93       	push	r27
     cfa:	ef 93       	push	r30
     cfc:	ff 93       	push	r31
	INT1_ptr();
     cfe:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <INT1_ptr>
     d02:	f0 91 a8 00 	lds	r31, 0x00A8	; 0x8000a8 <INT1_ptr+0x1>
     d06:	09 95       	icall
     d08:	ff 91       	pop	r31
     d0a:	ef 91       	pop	r30
     d0c:	bf 91       	pop	r27
     d0e:	af 91       	pop	r26
     d10:	9f 91       	pop	r25
     d12:	8f 91       	pop	r24
     d14:	7f 91       	pop	r23
     d16:	6f 91       	pop	r22
     d18:	5f 91       	pop	r21
     d1a:	4f 91       	pop	r20
     d1c:	3f 91       	pop	r19
     d1e:	2f 91       	pop	r18
     d20:	0f 90       	pop	r0
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	0f 90       	pop	r0
     d26:	1f 90       	pop	r1
     d28:	18 95       	reti

00000d2a <GI_enable>:

#include "GI_INTERFACE.h"

void GI_enable()
{
	SET_BIT(SREG, I);
     d2a:	8f b7       	in	r24, 0x3f	; 63
     d2c:	80 68       	ori	r24, 0x80	; 128
     d2e:	8f bf       	out	0x3f, r24	; 63
     d30:	08 95       	ret

00000d32 <I2C_init>:
#include "BIT_MATH.h"
#include "STD_TYPES.h"

void I2C_init(enum I2C_mode mode)
{
	if(mode == MASTER)
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	21 f0       	breq	.+8      	; 0xd3e <I2C_init+0xc>
	{
		
	}
	else if(mode == SLAVE)
     d36:	81 11       	cpse	r24, r1
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <I2C_init+0xc>
	{
		TWAR = I2C_SLAVE_ADDRESS << 1;
     d3a:	80 ea       	ldi	r24, 0xA0	; 160
     d3c:	82 b9       	out	0x02, r24	; 2
	}
	SET_BIT(TWCR,TWEN);
     d3e:	86 b7       	in	r24, 0x36	; 54
     d40:	84 60       	ori	r24, 0x04	; 4
     d42:	86 bf       	out	0x36, r24	; 54
	TWBR = 72;
     d44:	88 e4       	ldi	r24, 0x48	; 72
     d46:	80 b9       	out	0x00, r24	; 0
     d48:	08 95       	ret

00000d4a <TIMER0_start>:
}

u8 TIMER0_readTimer()
{
	return TCNT0;
}
     d4a:	81 11       	cpse	r24, r1
     d4c:	0a c0       	rjmp	.+20     	; 0xd62 <TIMER0_start+0x18>
     d4e:	83 b7       	in	r24, 0x33	; 51
     d50:	81 60       	ori	r24, 0x01	; 1
     d52:	83 bf       	out	0x33, r24	; 51
     d54:	83 b7       	in	r24, 0x33	; 51
     d56:	8d 7f       	andi	r24, 0xFD	; 253
     d58:	83 bf       	out	0x33, r24	; 51
     d5a:	83 b7       	in	r24, 0x33	; 51
     d5c:	8b 7f       	andi	r24, 0xFB	; 251
     d5e:	83 bf       	out	0x33, r24	; 51
     d60:	08 95       	ret
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	51 f4       	brne	.+20     	; 0xd7a <TIMER0_start+0x30>
     d66:	83 b7       	in	r24, 0x33	; 51
     d68:	8e 7f       	andi	r24, 0xFE	; 254
     d6a:	83 bf       	out	0x33, r24	; 51
     d6c:	83 b7       	in	r24, 0x33	; 51
     d6e:	82 60       	ori	r24, 0x02	; 2
     d70:	83 bf       	out	0x33, r24	; 51
     d72:	83 b7       	in	r24, 0x33	; 51
     d74:	8b 7f       	andi	r24, 0xFB	; 251
     d76:	83 bf       	out	0x33, r24	; 51
     d78:	08 95       	ret
     d7a:	82 30       	cpi	r24, 0x02	; 2
     d7c:	51 f4       	brne	.+20     	; 0xd92 <TIMER0_start+0x48>
     d7e:	83 b7       	in	r24, 0x33	; 51
     d80:	81 60       	ori	r24, 0x01	; 1
     d82:	83 bf       	out	0x33, r24	; 51
     d84:	83 b7       	in	r24, 0x33	; 51
     d86:	82 60       	ori	r24, 0x02	; 2
     d88:	83 bf       	out	0x33, r24	; 51
     d8a:	83 b7       	in	r24, 0x33	; 51
     d8c:	8b 7f       	andi	r24, 0xFB	; 251
     d8e:	83 bf       	out	0x33, r24	; 51
     d90:	08 95       	ret
     d92:	83 30       	cpi	r24, 0x03	; 3
     d94:	51 f4       	brne	.+20     	; 0xdaa <TIMER0_start+0x60>
     d96:	83 b7       	in	r24, 0x33	; 51
     d98:	8e 7f       	andi	r24, 0xFE	; 254
     d9a:	83 bf       	out	0x33, r24	; 51
     d9c:	83 b7       	in	r24, 0x33	; 51
     d9e:	8d 7f       	andi	r24, 0xFD	; 253
     da0:	83 bf       	out	0x33, r24	; 51
     da2:	83 b7       	in	r24, 0x33	; 51
     da4:	84 60       	ori	r24, 0x04	; 4
     da6:	83 bf       	out	0x33, r24	; 51
     da8:	08 95       	ret
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	51 f4       	brne	.+20     	; 0xdc2 <TIMER0_start+0x78>
     dae:	83 b7       	in	r24, 0x33	; 51
     db0:	81 60       	ori	r24, 0x01	; 1
     db2:	83 bf       	out	0x33, r24	; 51
     db4:	83 b7       	in	r24, 0x33	; 51
     db6:	8d 7f       	andi	r24, 0xFD	; 253
     db8:	83 bf       	out	0x33, r24	; 51
     dba:	83 b7       	in	r24, 0x33	; 51
     dbc:	84 60       	ori	r24, 0x04	; 4
     dbe:	83 bf       	out	0x33, r24	; 51
     dc0:	08 95       	ret
     dc2:	85 30       	cpi	r24, 0x05	; 5
     dc4:	51 f4       	brne	.+20     	; 0xdda <TIMER0_start+0x90>
     dc6:	83 b7       	in	r24, 0x33	; 51
     dc8:	8e 7f       	andi	r24, 0xFE	; 254
     dca:	83 bf       	out	0x33, r24	; 51
     dcc:	83 b7       	in	r24, 0x33	; 51
     dce:	82 60       	ori	r24, 0x02	; 2
     dd0:	83 bf       	out	0x33, r24	; 51
     dd2:	83 b7       	in	r24, 0x33	; 51
     dd4:	84 60       	ori	r24, 0x04	; 4
     dd6:	83 bf       	out	0x33, r24	; 51
     dd8:	08 95       	ret
     dda:	86 30       	cpi	r24, 0x06	; 6
     ddc:	49 f4       	brne	.+18     	; 0xdf0 <TIMER0_start+0xa6>
     dde:	83 b7       	in	r24, 0x33	; 51
     de0:	81 60       	ori	r24, 0x01	; 1
     de2:	83 bf       	out	0x33, r24	; 51
     de4:	83 b7       	in	r24, 0x33	; 51
     de6:	82 60       	ori	r24, 0x02	; 2
     de8:	83 bf       	out	0x33, r24	; 51
     dea:	83 b7       	in	r24, 0x33	; 51
     dec:	84 60       	ori	r24, 0x04	; 4
     dee:	83 bf       	out	0x33, r24	; 51
     df0:	08 95       	ret

00000df2 <__vector_11>:
     df2:	1f 92       	push	r1
     df4:	0f 92       	push	r0
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	0f 92       	push	r0
     dfa:	11 24       	eor	r1, r1
     dfc:	2f 93       	push	r18
     dfe:	3f 93       	push	r19
     e00:	4f 93       	push	r20
     e02:	5f 93       	push	r21
     e04:	6f 93       	push	r22
     e06:	7f 93       	push	r23
     e08:	8f 93       	push	r24
     e0a:	9f 93       	push	r25
     e0c:	af 93       	push	r26
     e0e:	bf 93       	push	r27
     e10:	ef 93       	push	r30
     e12:	ff 93       	push	r31
     e14:	e0 91 ab 00 	lds	r30, 0x00AB	; 0x8000ab <OV_ptr>
     e18:	f0 91 ac 00 	lds	r31, 0x00AC	; 0x8000ac <OV_ptr+0x1>
     e1c:	09 95       	icall
     e1e:	ff 91       	pop	r31
     e20:	ef 91       	pop	r30
     e22:	bf 91       	pop	r27
     e24:	af 91       	pop	r26
     e26:	9f 91       	pop	r25
     e28:	8f 91       	pop	r24
     e2a:	7f 91       	pop	r23
     e2c:	6f 91       	pop	r22
     e2e:	5f 91       	pop	r21
     e30:	4f 91       	pop	r20
     e32:	3f 91       	pop	r19
     e34:	2f 91       	pop	r18
     e36:	0f 90       	pop	r0
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	0f 90       	pop	r0
     e3c:	1f 90       	pop	r1
     e3e:	18 95       	reti

00000e40 <TIMER0_initCTCMode>:

void TIMER0_initCTCMode()
{
	//force bit
	SET_BIT(TCCR0, FOC0);
     e40:	83 b7       	in	r24, 0x33	; 51
     e42:	80 68       	ori	r24, 0x80	; 128
     e44:	83 bf       	out	0x33, r24	; 51
	
	//CTC mode
	CLEAR_BIT(TCCR0,WGM00);
     e46:	83 b7       	in	r24, 0x33	; 51
     e48:	8f 7b       	andi	r24, 0xBF	; 191
     e4a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
     e4c:	83 b7       	in	r24, 0x33	; 51
     e4e:	88 60       	ori	r24, 0x08	; 8
     e50:	83 bf       	out	0x33, r24	; 51
	
	
	#if(ocPinMode == OC0_DISCONNECTED)
	{
		CLEAR_BIT(TCCR0,COM00);
     e52:	83 b7       	in	r24, 0x33	; 51
     e54:	8f 7e       	andi	r24, 0xEF	; 239
     e56:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0,COM01);
     e58:	83 b7       	in	r24, 0x33	; 51
     e5a:	8f 7d       	andi	r24, 0xDF	; 223
     e5c:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,COM01);
	}
	#endif
	
	//enable interrupt
	SET_BIT(TIMSK,OCIE0);
     e5e:	89 b7       	in	r24, 0x39	; 57
     e60:	82 60       	ori	r24, 0x02	; 2
     e62:	89 bf       	out	0x39, r24	; 57
     e64:	08 95       	ret

00000e66 <TIMER0_setOCR>:
	
}

void TIMER0_setOCR(u8 num)
{
	OCR0 = num;
     e66:	8c bf       	out	0x3c, r24	; 60
     e68:	08 95       	ret

00000e6a <TIMER0_setCallbackCTC>:

void (*CTC_ptr)();

void TIMER0_setCallbackCTC( void (*APP_func)() )
{
	CTC_ptr = APP_func;
     e6a:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <CTC_ptr+0x1>
     e6e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <CTC_ptr>
     e72:	08 95       	ret

00000e74 <__vector_10>:
}

//ISR
void __vector_10(void) __attribute__((signal,used));
void __vector_10(void)
{
     e74:	1f 92       	push	r1
     e76:	0f 92       	push	r0
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	0f 92       	push	r0
     e7c:	11 24       	eor	r1, r1
     e7e:	2f 93       	push	r18
     e80:	3f 93       	push	r19
     e82:	4f 93       	push	r20
     e84:	5f 93       	push	r21
     e86:	6f 93       	push	r22
     e88:	7f 93       	push	r23
     e8a:	8f 93       	push	r24
     e8c:	9f 93       	push	r25
     e8e:	af 93       	push	r26
     e90:	bf 93       	push	r27
     e92:	ef 93       	push	r30
     e94:	ff 93       	push	r31
	//toggleLed();
	CTC_ptr();
     e96:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <CTC_ptr>
     e9a:	f0 91 aa 00 	lds	r31, 0x00AA	; 0x8000aa <CTC_ptr+0x1>
     e9e:	09 95       	icall
	
	
}
     ea0:	ff 91       	pop	r31
     ea2:	ef 91       	pop	r30
     ea4:	bf 91       	pop	r27
     ea6:	af 91       	pop	r26
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	7f 91       	pop	r23
     eae:	6f 91       	pop	r22
     eb0:	5f 91       	pop	r21
     eb2:	4f 91       	pop	r20
     eb4:	3f 91       	pop	r19
     eb6:	2f 91       	pop	r18
     eb8:	0f 90       	pop	r0
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	0f 90       	pop	r0
     ebe:	1f 90       	pop	r1
     ec0:	18 95       	reti

00000ec2 <TIMER1_initCTCMode>:

/////////////////CTC

void TIMER1_initCTCMode()
{
    TCCR1A = 0; // Clear TCCR1A register
     ec2:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0; // Clear TCCR1B register
     ec4:	1e bc       	out	0x2e, r1	; 46
	//force bit
	//CLEAR_BIT(TCCR1A,FOC1A);
	//mode 4
	CLEAR_BIT(TCCR1A,WGM10);
     ec6:	8f b5       	in	r24, 0x2f	; 47
     ec8:	8e 7f       	andi	r24, 0xFE	; 254
     eca:	8f bd       	out	0x2f, r24	; 47
	CLEAR_BIT(TCCR1A,WGM11);
     ecc:	8f b5       	in	r24, 0x2f	; 47
     ece:	8d 7f       	andi	r24, 0xFD	; 253
     ed0:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,WGM12);
     ed2:	8e b5       	in	r24, 0x2e	; 46
     ed4:	88 60       	ori	r24, 0x08	; 8
     ed6:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TCCR1B,WGM13);
     ed8:	8e b5       	in	r24, 0x2e	; 46
     eda:	8f 7e       	andi	r24, 0xEF	; 239
     edc:	8e bd       	out	0x2e, r24	; 46
	//enable interrupt
	SET_BIT(TIMSK,OCIE1A);
     ede:	89 b7       	in	r24, 0x39	; 57
     ee0:	80 61       	ori	r24, 0x10	; 16
     ee2:	89 bf       	out	0x39, r24	; 57
     ee4:	08 95       	ret

00000ee6 <TIMER1_setOCR>:
}

void TIMER1_setOCR(u16 num)
{
	OCR1A = num;
     ee6:	9b bd       	out	0x2b, r25	; 43
     ee8:	8a bd       	out	0x2a, r24	; 42
     eea:	08 95       	ret

00000eec <TIMER1_start>:
}


void TIMER1_start(u8 prescaler)
{
	if(prescaler == TIMER1_CLK_DIV_1)
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	51 f4       	brne	.+20     	; 0xf04 <TIMER1_start+0x18>
	{
		SET_BIT(TCCR1B,CS10);
     ef0:	8e b5       	in	r24, 0x2e	; 46
     ef2:	81 60       	ori	r24, 0x01	; 1
     ef4:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TCCR1B,CS11);
     ef6:	8e b5       	in	r24, 0x2e	; 46
     ef8:	8d 7f       	andi	r24, 0xFD	; 253
     efa:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TCCR1B,CS12);
     efc:	8e b5       	in	r24, 0x2e	; 46
     efe:	8b 7f       	andi	r24, 0xFB	; 251
     f00:	8e bd       	out	0x2e, r24	; 46
     f02:	08 95       	ret
	}
	else if(prescaler == TIMER1_CLK_DIV_8)
     f04:	82 30       	cpi	r24, 0x02	; 2
     f06:	51 f4       	brne	.+20     	; 0xf1c <TIMER1_start+0x30>
	{
		CLEAR_BIT(TCCR1B,CS10);
     f08:	8e b5       	in	r24, 0x2e	; 46
     f0a:	8e 7f       	andi	r24, 0xFE	; 254
     f0c:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B,CS11);
     f0e:	8e b5       	in	r24, 0x2e	; 46
     f10:	82 60       	ori	r24, 0x02	; 2
     f12:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TCCR1B,CS12);
     f14:	8e b5       	in	r24, 0x2e	; 46
     f16:	8b 7f       	andi	r24, 0xFB	; 251
     f18:	8e bd       	out	0x2e, r24	; 46
     f1a:	08 95       	ret
	}
	else if(prescaler == TIMER1_CLK_DIV_64)
     f1c:	83 30       	cpi	r24, 0x03	; 3
     f1e:	51 f4       	brne	.+20     	; 0xf34 <TIMER1_start+0x48>
	{
		SET_BIT(TCCR1B,CS10);
     f20:	8e b5       	in	r24, 0x2e	; 46
     f22:	81 60       	ori	r24, 0x01	; 1
     f24:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B,CS11);
     f26:	8e b5       	in	r24, 0x2e	; 46
     f28:	82 60       	ori	r24, 0x02	; 2
     f2a:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TCCR1B,CS12);
     f2c:	8e b5       	in	r24, 0x2e	; 46
     f2e:	8b 7f       	andi	r24, 0xFB	; 251
     f30:	8e bd       	out	0x2e, r24	; 46
     f32:	08 95       	ret
	}
	else if(prescaler == TIMER1_CLK_DIV_256)
     f34:	84 30       	cpi	r24, 0x04	; 4
     f36:	51 f4       	brne	.+20     	; 0xf4c <TIMER1_start+0x60>
	{
		CLEAR_BIT(TCCR1B,CS10);
     f38:	8e b5       	in	r24, 0x2e	; 46
     f3a:	8e 7f       	andi	r24, 0xFE	; 254
     f3c:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TCCR1B,CS11);
     f3e:	8e b5       	in	r24, 0x2e	; 46
     f40:	8d 7f       	andi	r24, 0xFD	; 253
     f42:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B,CS12);
     f44:	8e b5       	in	r24, 0x2e	; 46
     f46:	84 60       	ori	r24, 0x04	; 4
     f48:	8e bd       	out	0x2e, r24	; 46
     f4a:	08 95       	ret
	}
	else if(prescaler == TIMER1_CLK_DIV_1024)
     f4c:	85 30       	cpi	r24, 0x05	; 5
     f4e:	51 f4       	brne	.+20     	; 0xf64 <TIMER1_start+0x78>
	{
		SET_BIT(TCCR1B,CS10);
     f50:	8e b5       	in	r24, 0x2e	; 46
     f52:	81 60       	ori	r24, 0x01	; 1
     f54:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TCCR1B,CS11);
     f56:	8e b5       	in	r24, 0x2e	; 46
     f58:	8d 7f       	andi	r24, 0xFD	; 253
     f5a:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B,CS12);
     f5c:	8e b5       	in	r24, 0x2e	; 46
     f5e:	84 60       	ori	r24, 0x04	; 4
     f60:	8e bd       	out	0x2e, r24	; 46
     f62:	08 95       	ret
	}
	else if(prescaler == TIMER1_CLK_EXTERNAL_FALLING)
     f64:	86 30       	cpi	r24, 0x06	; 6
     f66:	51 f4       	brne	.+20     	; 0xf7c <TIMER1_start+0x90>
	{
		CLEAR_BIT(TCCR1B,CS10);
     f68:	8e b5       	in	r24, 0x2e	; 46
     f6a:	8e 7f       	andi	r24, 0xFE	; 254
     f6c:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B,CS11);
     f6e:	8e b5       	in	r24, 0x2e	; 46
     f70:	82 60       	ori	r24, 0x02	; 2
     f72:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B,CS12);
     f74:	8e b5       	in	r24, 0x2e	; 46
     f76:	84 60       	ori	r24, 0x04	; 4
     f78:	8e bd       	out	0x2e, r24	; 46
     f7a:	08 95       	ret
	}
	else if(prescaler == TIMER1_CLK_EXTERNAL_RISING)
     f7c:	87 30       	cpi	r24, 0x07	; 7
     f7e:	49 f4       	brne	.+18     	; 0xf92 <TIMER1_start+0xa6>
	{
		SET_BIT(TCCR1B,CS10);
     f80:	8e b5       	in	r24, 0x2e	; 46
     f82:	81 60       	ori	r24, 0x01	; 1
     f84:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B,CS11);
     f86:	8e b5       	in	r24, 0x2e	; 46
     f88:	82 60       	ori	r24, 0x02	; 2
     f8a:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B,CS12);
     f8c:	8e b5       	in	r24, 0x2e	; 46
     f8e:	84 60       	ori	r24, 0x04	; 4
     f90:	8e bd       	out	0x2e, r24	; 46
     f92:	08 95       	ret

00000f94 <TIMER1_setCallbackCTC>:

void (*T1_CTC_ptr)();

void TIMER1_setCallbackCTC( void (*APP_func)() )
{
	T1_CTC_ptr = APP_func;
     f94:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <T1_CTC_ptr+0x1>
     f98:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <T1_CTC_ptr>
     f9c:	08 95       	ret

00000f9e <__vector_7>:
}

//ISR
void __vector_7(void) __attribute__((signal,used));  
void __vector_7(void)
{
     f9e:	1f 92       	push	r1
     fa0:	0f 92       	push	r0
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	0f 92       	push	r0
     fa6:	11 24       	eor	r1, r1
     fa8:	2f 93       	push	r18
     faa:	3f 93       	push	r19
     fac:	4f 93       	push	r20
     fae:	5f 93       	push	r21
     fb0:	6f 93       	push	r22
     fb2:	7f 93       	push	r23
     fb4:	8f 93       	push	r24
     fb6:	9f 93       	push	r25
     fb8:	af 93       	push	r26
     fba:	bf 93       	push	r27
     fbc:	ef 93       	push	r30
     fbe:	ff 93       	push	r31
	T1_CTC_ptr();	
     fc0:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <T1_CTC_ptr>
     fc4:	f0 91 ae 00 	lds	r31, 0x00AE	; 0x8000ae <T1_CTC_ptr+0x1>
     fc8:	09 95       	icall
}
     fca:	ff 91       	pop	r31
     fcc:	ef 91       	pop	r30
     fce:	bf 91       	pop	r27
     fd0:	af 91       	pop	r26
     fd2:	9f 91       	pop	r25
     fd4:	8f 91       	pop	r24
     fd6:	7f 91       	pop	r23
     fd8:	6f 91       	pop	r22
     fda:	5f 91       	pop	r21
     fdc:	4f 91       	pop	r20
     fde:	3f 91       	pop	r19
     fe0:	2f 91       	pop	r18
     fe2:	0f 90       	pop	r0
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	0f 90       	pop	r0
     fe8:	1f 90       	pop	r1
     fea:	18 95       	reti

00000fec <__fixunssfsi>:
     fec:	0e 94 92 08 	call	0x1124	; 0x1124 <__fp_splitA>
     ff0:	88 f0       	brcs	.+34     	; 0x1014 <__fixunssfsi+0x28>
     ff2:	9f 57       	subi	r25, 0x7F	; 127
     ff4:	98 f0       	brcs	.+38     	; 0x101c <__fixunssfsi+0x30>
     ff6:	b9 2f       	mov	r27, r25
     ff8:	99 27       	eor	r25, r25
     ffa:	b7 51       	subi	r27, 0x17	; 23
     ffc:	b0 f0       	brcs	.+44     	; 0x102a <__fixunssfsi+0x3e>
     ffe:	e1 f0       	breq	.+56     	; 0x1038 <__fixunssfsi+0x4c>
    1000:	66 0f       	add	r22, r22
    1002:	77 1f       	adc	r23, r23
    1004:	88 1f       	adc	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	1a f0       	brmi	.+6      	; 0x1010 <__fixunssfsi+0x24>
    100a:	ba 95       	dec	r27
    100c:	c9 f7       	brne	.-14     	; 0x1000 <__fixunssfsi+0x14>
    100e:	14 c0       	rjmp	.+40     	; 0x1038 <__fixunssfsi+0x4c>
    1010:	b1 30       	cpi	r27, 0x01	; 1
    1012:	91 f0       	breq	.+36     	; 0x1038 <__fixunssfsi+0x4c>
    1014:	0e 94 ac 08 	call	0x1158	; 0x1158 <__fp_zero>
    1018:	b1 e0       	ldi	r27, 0x01	; 1
    101a:	08 95       	ret
    101c:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__fp_zero>
    1020:	67 2f       	mov	r22, r23
    1022:	78 2f       	mov	r23, r24
    1024:	88 27       	eor	r24, r24
    1026:	b8 5f       	subi	r27, 0xF8	; 248
    1028:	39 f0       	breq	.+14     	; 0x1038 <__fixunssfsi+0x4c>
    102a:	b9 3f       	cpi	r27, 0xF9	; 249
    102c:	cc f3       	brlt	.-14     	; 0x1020 <__fixunssfsi+0x34>
    102e:	86 95       	lsr	r24
    1030:	77 95       	ror	r23
    1032:	67 95       	ror	r22
    1034:	b3 95       	inc	r27
    1036:	d9 f7       	brne	.-10     	; 0x102e <__fixunssfsi+0x42>
    1038:	3e f4       	brtc	.+14     	; 0x1048 <__fixunssfsi+0x5c>
    103a:	90 95       	com	r25
    103c:	80 95       	com	r24
    103e:	70 95       	com	r23
    1040:	61 95       	neg	r22
    1042:	7f 4f       	sbci	r23, 0xFF	; 255
    1044:	8f 4f       	sbci	r24, 0xFF	; 255
    1046:	9f 4f       	sbci	r25, 0xFF	; 255
    1048:	08 95       	ret

0000104a <__floatunsisf>:
    104a:	e8 94       	clt
    104c:	09 c0       	rjmp	.+18     	; 0x1060 <__floatsisf+0x12>

0000104e <__floatsisf>:
    104e:	97 fb       	bst	r25, 7
    1050:	3e f4       	brtc	.+14     	; 0x1060 <__floatsisf+0x12>
    1052:	90 95       	com	r25
    1054:	80 95       	com	r24
    1056:	70 95       	com	r23
    1058:	61 95       	neg	r22
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	8f 4f       	sbci	r24, 0xFF	; 255
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	99 23       	and	r25, r25
    1062:	a9 f0       	breq	.+42     	; 0x108e <__floatsisf+0x40>
    1064:	f9 2f       	mov	r31, r25
    1066:	96 e9       	ldi	r25, 0x96	; 150
    1068:	bb 27       	eor	r27, r27
    106a:	93 95       	inc	r25
    106c:	f6 95       	lsr	r31
    106e:	87 95       	ror	r24
    1070:	77 95       	ror	r23
    1072:	67 95       	ror	r22
    1074:	b7 95       	ror	r27
    1076:	f1 11       	cpse	r31, r1
    1078:	f8 cf       	rjmp	.-16     	; 0x106a <__floatsisf+0x1c>
    107a:	fa f4       	brpl	.+62     	; 0x10ba <__floatsisf+0x6c>
    107c:	bb 0f       	add	r27, r27
    107e:	11 f4       	brne	.+4      	; 0x1084 <__floatsisf+0x36>
    1080:	60 ff       	sbrs	r22, 0
    1082:	1b c0       	rjmp	.+54     	; 0x10ba <__floatsisf+0x6c>
    1084:	6f 5f       	subi	r22, 0xFF	; 255
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	8f 4f       	sbci	r24, 0xFF	; 255
    108a:	9f 4f       	sbci	r25, 0xFF	; 255
    108c:	16 c0       	rjmp	.+44     	; 0x10ba <__floatsisf+0x6c>
    108e:	88 23       	and	r24, r24
    1090:	11 f0       	breq	.+4      	; 0x1096 <__floatsisf+0x48>
    1092:	96 e9       	ldi	r25, 0x96	; 150
    1094:	11 c0       	rjmp	.+34     	; 0x10b8 <__floatsisf+0x6a>
    1096:	77 23       	and	r23, r23
    1098:	21 f0       	breq	.+8      	; 0x10a2 <__floatsisf+0x54>
    109a:	9e e8       	ldi	r25, 0x8E	; 142
    109c:	87 2f       	mov	r24, r23
    109e:	76 2f       	mov	r23, r22
    10a0:	05 c0       	rjmp	.+10     	; 0x10ac <__floatsisf+0x5e>
    10a2:	66 23       	and	r22, r22
    10a4:	71 f0       	breq	.+28     	; 0x10c2 <__floatsisf+0x74>
    10a6:	96 e8       	ldi	r25, 0x86	; 134
    10a8:	86 2f       	mov	r24, r22
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	2a f0       	brmi	.+10     	; 0x10ba <__floatsisf+0x6c>
    10b0:	9a 95       	dec	r25
    10b2:	66 0f       	add	r22, r22
    10b4:	77 1f       	adc	r23, r23
    10b6:	88 1f       	adc	r24, r24
    10b8:	da f7       	brpl	.-10     	; 0x10b0 <__floatsisf+0x62>
    10ba:	88 0f       	add	r24, r24
    10bc:	96 95       	lsr	r25
    10be:	87 95       	ror	r24
    10c0:	97 f9       	bld	r25, 7
    10c2:	08 95       	ret

000010c4 <__fp_inf>:
    10c4:	97 f9       	bld	r25, 7
    10c6:	9f 67       	ori	r25, 0x7F	; 127
    10c8:	80 e8       	ldi	r24, 0x80	; 128
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	08 95       	ret

000010d0 <__fp_nan>:
    10d0:	9f ef       	ldi	r25, 0xFF	; 255
    10d2:	80 ec       	ldi	r24, 0xC0	; 192
    10d4:	08 95       	ret

000010d6 <__fp_pscA>:
    10d6:	00 24       	eor	r0, r0
    10d8:	0a 94       	dec	r0
    10da:	16 16       	cp	r1, r22
    10dc:	17 06       	cpc	r1, r23
    10de:	18 06       	cpc	r1, r24
    10e0:	09 06       	cpc	r0, r25
    10e2:	08 95       	ret

000010e4 <__fp_pscB>:
    10e4:	00 24       	eor	r0, r0
    10e6:	0a 94       	dec	r0
    10e8:	12 16       	cp	r1, r18
    10ea:	13 06       	cpc	r1, r19
    10ec:	14 06       	cpc	r1, r20
    10ee:	05 06       	cpc	r0, r21
    10f0:	08 95       	ret

000010f2 <__fp_round>:
    10f2:	09 2e       	mov	r0, r25
    10f4:	03 94       	inc	r0
    10f6:	00 0c       	add	r0, r0
    10f8:	11 f4       	brne	.+4      	; 0x10fe <__fp_round+0xc>
    10fa:	88 23       	and	r24, r24
    10fc:	52 f0       	brmi	.+20     	; 0x1112 <__fp_round+0x20>
    10fe:	bb 0f       	add	r27, r27
    1100:	40 f4       	brcc	.+16     	; 0x1112 <__fp_round+0x20>
    1102:	bf 2b       	or	r27, r31
    1104:	11 f4       	brne	.+4      	; 0x110a <__fp_round+0x18>
    1106:	60 ff       	sbrs	r22, 0
    1108:	04 c0       	rjmp	.+8      	; 0x1112 <__fp_round+0x20>
    110a:	6f 5f       	subi	r22, 0xFF	; 255
    110c:	7f 4f       	sbci	r23, 0xFF	; 255
    110e:	8f 4f       	sbci	r24, 0xFF	; 255
    1110:	9f 4f       	sbci	r25, 0xFF	; 255
    1112:	08 95       	ret

00001114 <__fp_split3>:
    1114:	57 fd       	sbrc	r21, 7
    1116:	90 58       	subi	r25, 0x80	; 128
    1118:	44 0f       	add	r20, r20
    111a:	55 1f       	adc	r21, r21
    111c:	59 f0       	breq	.+22     	; 0x1134 <__fp_splitA+0x10>
    111e:	5f 3f       	cpi	r21, 0xFF	; 255
    1120:	71 f0       	breq	.+28     	; 0x113e <__fp_splitA+0x1a>
    1122:	47 95       	ror	r20

00001124 <__fp_splitA>:
    1124:	88 0f       	add	r24, r24
    1126:	97 fb       	bst	r25, 7
    1128:	99 1f       	adc	r25, r25
    112a:	61 f0       	breq	.+24     	; 0x1144 <__fp_splitA+0x20>
    112c:	9f 3f       	cpi	r25, 0xFF	; 255
    112e:	79 f0       	breq	.+30     	; 0x114e <__fp_splitA+0x2a>
    1130:	87 95       	ror	r24
    1132:	08 95       	ret
    1134:	12 16       	cp	r1, r18
    1136:	13 06       	cpc	r1, r19
    1138:	14 06       	cpc	r1, r20
    113a:	55 1f       	adc	r21, r21
    113c:	f2 cf       	rjmp	.-28     	; 0x1122 <__fp_split3+0xe>
    113e:	46 95       	lsr	r20
    1140:	f1 df       	rcall	.-30     	; 0x1124 <__fp_splitA>
    1142:	08 c0       	rjmp	.+16     	; 0x1154 <__fp_splitA+0x30>
    1144:	16 16       	cp	r1, r22
    1146:	17 06       	cpc	r1, r23
    1148:	18 06       	cpc	r1, r24
    114a:	99 1f       	adc	r25, r25
    114c:	f1 cf       	rjmp	.-30     	; 0x1130 <__fp_splitA+0xc>
    114e:	86 95       	lsr	r24
    1150:	71 05       	cpc	r23, r1
    1152:	61 05       	cpc	r22, r1
    1154:	08 94       	sec
    1156:	08 95       	ret

00001158 <__fp_zero>:
    1158:	e8 94       	clt

0000115a <__fp_szero>:
    115a:	bb 27       	eor	r27, r27
    115c:	66 27       	eor	r22, r22
    115e:	77 27       	eor	r23, r23
    1160:	cb 01       	movw	r24, r22
    1162:	97 f9       	bld	r25, 7
    1164:	08 95       	ret

00001166 <__mulsf3>:
    1166:	0e 94 c6 08 	call	0x118c	; 0x118c <__mulsf3x>
    116a:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__fp_round>
    116e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fp_pscA>
    1172:	38 f0       	brcs	.+14     	; 0x1182 <__mulsf3+0x1c>
    1174:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__fp_pscB>
    1178:	20 f0       	brcs	.+8      	; 0x1182 <__mulsf3+0x1c>
    117a:	95 23       	and	r25, r21
    117c:	11 f0       	breq	.+4      	; 0x1182 <__mulsf3+0x1c>
    117e:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__fp_inf>
    1182:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__fp_nan>
    1186:	11 24       	eor	r1, r1
    1188:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__fp_szero>

0000118c <__mulsf3x>:
    118c:	0e 94 8a 08 	call	0x1114	; 0x1114 <__fp_split3>
    1190:	70 f3       	brcs	.-36     	; 0x116e <__mulsf3+0x8>

00001192 <__mulsf3_pse>:
    1192:	95 9f       	mul	r25, r21
    1194:	c1 f3       	breq	.-16     	; 0x1186 <__mulsf3+0x20>
    1196:	95 0f       	add	r25, r21
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	55 1f       	adc	r21, r21
    119c:	62 9f       	mul	r22, r18
    119e:	f0 01       	movw	r30, r0
    11a0:	72 9f       	mul	r23, r18
    11a2:	bb 27       	eor	r27, r27
    11a4:	f0 0d       	add	r31, r0
    11a6:	b1 1d       	adc	r27, r1
    11a8:	63 9f       	mul	r22, r19
    11aa:	aa 27       	eor	r26, r26
    11ac:	f0 0d       	add	r31, r0
    11ae:	b1 1d       	adc	r27, r1
    11b0:	aa 1f       	adc	r26, r26
    11b2:	64 9f       	mul	r22, r20
    11b4:	66 27       	eor	r22, r22
    11b6:	b0 0d       	add	r27, r0
    11b8:	a1 1d       	adc	r26, r1
    11ba:	66 1f       	adc	r22, r22
    11bc:	82 9f       	mul	r24, r18
    11be:	22 27       	eor	r18, r18
    11c0:	b0 0d       	add	r27, r0
    11c2:	a1 1d       	adc	r26, r1
    11c4:	62 1f       	adc	r22, r18
    11c6:	73 9f       	mul	r23, r19
    11c8:	b0 0d       	add	r27, r0
    11ca:	a1 1d       	adc	r26, r1
    11cc:	62 1f       	adc	r22, r18
    11ce:	83 9f       	mul	r24, r19
    11d0:	a0 0d       	add	r26, r0
    11d2:	61 1d       	adc	r22, r1
    11d4:	22 1f       	adc	r18, r18
    11d6:	74 9f       	mul	r23, r20
    11d8:	33 27       	eor	r19, r19
    11da:	a0 0d       	add	r26, r0
    11dc:	61 1d       	adc	r22, r1
    11de:	23 1f       	adc	r18, r19
    11e0:	84 9f       	mul	r24, r20
    11e2:	60 0d       	add	r22, r0
    11e4:	21 1d       	adc	r18, r1
    11e6:	82 2f       	mov	r24, r18
    11e8:	76 2f       	mov	r23, r22
    11ea:	6a 2f       	mov	r22, r26
    11ec:	11 24       	eor	r1, r1
    11ee:	9f 57       	subi	r25, 0x7F	; 127
    11f0:	50 40       	sbci	r21, 0x00	; 0
    11f2:	9a f0       	brmi	.+38     	; 0x121a <__mulsf3_pse+0x88>
    11f4:	f1 f0       	breq	.+60     	; 0x1232 <__mulsf3_pse+0xa0>
    11f6:	88 23       	and	r24, r24
    11f8:	4a f0       	brmi	.+18     	; 0x120c <__mulsf3_pse+0x7a>
    11fa:	ee 0f       	add	r30, r30
    11fc:	ff 1f       	adc	r31, r31
    11fe:	bb 1f       	adc	r27, r27
    1200:	66 1f       	adc	r22, r22
    1202:	77 1f       	adc	r23, r23
    1204:	88 1f       	adc	r24, r24
    1206:	91 50       	subi	r25, 0x01	; 1
    1208:	50 40       	sbci	r21, 0x00	; 0
    120a:	a9 f7       	brne	.-22     	; 0x11f6 <__mulsf3_pse+0x64>
    120c:	9e 3f       	cpi	r25, 0xFE	; 254
    120e:	51 05       	cpc	r21, r1
    1210:	80 f0       	brcs	.+32     	; 0x1232 <__mulsf3_pse+0xa0>
    1212:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__fp_inf>
    1216:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__fp_szero>
    121a:	5f 3f       	cpi	r21, 0xFF	; 255
    121c:	e4 f3       	brlt	.-8      	; 0x1216 <__mulsf3_pse+0x84>
    121e:	98 3e       	cpi	r25, 0xE8	; 232
    1220:	d4 f3       	brlt	.-12     	; 0x1216 <__mulsf3_pse+0x84>
    1222:	86 95       	lsr	r24
    1224:	77 95       	ror	r23
    1226:	67 95       	ror	r22
    1228:	b7 95       	ror	r27
    122a:	f7 95       	ror	r31
    122c:	e7 95       	ror	r30
    122e:	9f 5f       	subi	r25, 0xFF	; 255
    1230:	c1 f7       	brne	.-16     	; 0x1222 <__mulsf3_pse+0x90>
    1232:	fe 2b       	or	r31, r30
    1234:	88 0f       	add	r24, r24
    1236:	91 1d       	adc	r25, r1
    1238:	96 95       	lsr	r25
    123a:	87 95       	ror	r24
    123c:	97 f9       	bld	r25, 7
    123e:	08 95       	ret

00001240 <__udivmodhi4>:
    1240:	aa 1b       	sub	r26, r26
    1242:	bb 1b       	sub	r27, r27
    1244:	51 e1       	ldi	r21, 0x11	; 17
    1246:	07 c0       	rjmp	.+14     	; 0x1256 <__udivmodhi4_ep>

00001248 <__udivmodhi4_loop>:
    1248:	aa 1f       	adc	r26, r26
    124a:	bb 1f       	adc	r27, r27
    124c:	a6 17       	cp	r26, r22
    124e:	b7 07       	cpc	r27, r23
    1250:	10 f0       	brcs	.+4      	; 0x1256 <__udivmodhi4_ep>
    1252:	a6 1b       	sub	r26, r22
    1254:	b7 0b       	sbc	r27, r23

00001256 <__udivmodhi4_ep>:
    1256:	88 1f       	adc	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	5a 95       	dec	r21
    125c:	a9 f7       	brne	.-22     	; 0x1248 <__udivmodhi4_loop>
    125e:	80 95       	com	r24
    1260:	90 95       	com	r25
    1262:	bc 01       	movw	r22, r24
    1264:	cd 01       	movw	r24, r26
    1266:	08 95       	ret

00001268 <__divmodhi4>:
    1268:	97 fb       	bst	r25, 7
    126a:	07 2e       	mov	r0, r23
    126c:	16 f4       	brtc	.+4      	; 0x1272 <__divmodhi4+0xa>
    126e:	00 94       	com	r0
    1270:	07 d0       	rcall	.+14     	; 0x1280 <__divmodhi4_neg1>
    1272:	77 fd       	sbrc	r23, 7
    1274:	09 d0       	rcall	.+18     	; 0x1288 <__divmodhi4_neg2>
    1276:	0e 94 20 09 	call	0x1240	; 0x1240 <__udivmodhi4>
    127a:	07 fc       	sbrc	r0, 7
    127c:	05 d0       	rcall	.+10     	; 0x1288 <__divmodhi4_neg2>
    127e:	3e f4       	brtc	.+14     	; 0x128e <__divmodhi4_exit>

00001280 <__divmodhi4_neg1>:
    1280:	90 95       	com	r25
    1282:	81 95       	neg	r24
    1284:	9f 4f       	sbci	r25, 0xFF	; 255
    1286:	08 95       	ret

00001288 <__divmodhi4_neg2>:
    1288:	70 95       	com	r23
    128a:	61 95       	neg	r22
    128c:	7f 4f       	sbci	r23, 0xFF	; 255

0000128e <__divmodhi4_exit>:
    128e:	08 95       	ret

00001290 <__umulhisi3>:
    1290:	a2 9f       	mul	r26, r18
    1292:	b0 01       	movw	r22, r0
    1294:	b3 9f       	mul	r27, r19
    1296:	c0 01       	movw	r24, r0
    1298:	a3 9f       	mul	r26, r19
    129a:	70 0d       	add	r23, r0
    129c:	81 1d       	adc	r24, r1
    129e:	11 24       	eor	r1, r1
    12a0:	91 1d       	adc	r25, r1
    12a2:	b2 9f       	mul	r27, r18
    12a4:	70 0d       	add	r23, r0
    12a6:	81 1d       	adc	r24, r1
    12a8:	11 24       	eor	r1, r1
    12aa:	91 1d       	adc	r25, r1
    12ac:	08 95       	ret

000012ae <_exit>:
    12ae:	f8 94       	cli

000012b0 <__stop_program>:
    12b0:	ff cf       	rjmp	.-2      	; 0x12b0 <__stop_program>
